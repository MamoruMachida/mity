<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>
    2020-03 on 
    Mity
    </title>
    <link>https://mithy.fun/archives/2020-03/</link>
    <description>Recent content in 2020-03
    on Mity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    
    
    <copyright>&amp;copy;Mamoru Machida 2019</copyright>
    <lastBuildDate>Wed, 18 Mar 2020 15:27:50 +0900</lastBuildDate>
    
    
        <atom:link href="https://mithy.fun/archives/2020-03/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub Actionsのubuntu-latestでURLEncode</title>
      <link>https://mithy.fun/memos/github-actions%E3%81%AEubuntu-latest%E3%81%A7urlencode/</link>
      <pubDate>Wed, 18 Mar 2020 15:27:50 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/github-actions%E3%81%AEubuntu-latest%E3%81%A7urlencode/</guid>
      <description><![CDATA[jsonから値を抜きだしてURLを作りたかったので結局こんな感じになった USER_NAME=$(python3 -c &amp;#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&amp;#34; $(echo $HOGE_JSON | jq .huga))&amp;#39; ENCODED_URL=$(echo https://example.com?un=${USER_NAME}) $(echo $HOGE)は引数に渡るときに&amp;quot;hoge&amp;quot;となるのでsys.argv[1][1:-1]で両端のダブルクオートを切り取ってる もっといいやり方がありそうだけどとりあえずこれで]]></description>
      <content:encoded><![CDATA[<p>jsonから値を抜きだしてURLを作りたかったので結局こんな感じになった</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nv">USER_NAME</span><span class="o">=</span><span class="k">$(</span>python3 -c <span class="s2">&#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34;</span> <span class="k">$(</span><span class="nb">echo</span> <span class="nv">$HOGE_JSON</span> <span class="p">|</span> jq .huga<span class="k">))</span><span class="err">&#39;</span>
<span class="nv">ENCODED_URL</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> https://example.com?un<span class="o">=</span><span class="si">${</span><span class="nv">USER_NAME</span><span class="si">}</span><span class="k">)</span>
</code></pre></div><p><code>$(echo $HOGE)</code>は引数に渡るときに<code>&quot;hoge&quot;</code>となるので<code>sys.argv[1][1:-1]</code>で両端のダブルクオートを切り取ってる
もっといいやり方がありそうだけどとりあえずこれで</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>@angular-eslint/angular-eslintでAngularのLinterをTSLintからESLintに置き換えてみた</title>
      <link>https://mithy.fun/notes/angular-eslint%E3%81%A7angular%E3%81%AElinter%E3%82%92tslint%E3%81%8B%E3%82%89eslint%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 16 Mar 2020 12:06:21 +0900</pubDate>
      
      <guid>https://mithy.fun/notes/angular-eslint%E3%81%A7angular%E3%81%AElinter%E3%82%92tslint%E3%81%8B%E3%82%89eslint%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description><![CDATA[モチベーション 各所でTSLintからESLintの移行が進んでるのと、VSCodeのESLintフォーマッターを使いたかった。 移行手順 ng newしたところから始めます。AngularCLIのバージョンは9.0.6でした。 パッケージのインストール まず、eslintと@angular-eslint関連のパッケージをインストールします。 angular-eslint/angular-eslint: Monorepo for all the tooling related to using ESLint with Angular npm i -D eslint \ @angular-eslint/builder \ @angular-eslint/eslint-plugin \ @angular-eslint/template-parser \ @angular-eslint/eslint-plugin-template コマンドとESLint]]></description>
      <content:encoded><![CDATA[<h2 id="モチベーション">モチベーション</h2>
<p>各所でTSLintからESLintの移行が進んでるのと、VSCodeのESLintフォーマッターを使いたかった。</p>
<h2 id="移行手順">移行手順</h2>
<p><code>ng new</code>したところから始めます。AngularCLIのバージョンは<code>9.0.6</code>でした。</p>
<h3 id="パッケージのインストール">パッケージのインストール</h3>
<p>まず、<code>eslint</code>と<code>@angular-eslint</code>関連のパッケージをインストールします。
<a href="https://github.com/angular-eslint/angular-eslint" target="_blank" rel="nofollow noopener">angular-eslint/angular-eslint: Monorepo for all the tooling related to using ESLint with Angular</a></p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">npm i -D eslint <span class="se">\
</span><span class="se"></span>  @angular-eslint/builder <span class="se">\
</span><span class="se"></span>  @angular-eslint/eslint-plugin <span class="se">\
</span><span class="se"></span>  @angular-eslint/template-parser <span class="se">\
</span><span class="se"></span>  @angular-eslint/eslint-plugin-template
</code></pre></div><h3 id="コマンドとeslintの設定を修正">コマンドとESLintの設定を修正</h3>
<p>前述したリポジトリに手順もありますが、各設定ファイルのサンプルがあったので、それを参考に<code>angular.json</code>を修正、<strong><code>.eslintrc.js</code></strong>を追加しました。angular.jsonの差分はこんな感じ<br>
<img src="/img/2020-03-16-12-41-16.png" alt="angular.jsonの差分"></p>
<p><code>.eslint.js</code>のサンプルは
<a href="https://github.com/angular-eslint/angular-eslint/blob/master/packages/integration-tests/fixtures/angular-cli-workspace/.eslintrc.js" target="_blank" rel="nofollow noopener">ここ</a>からいただきました。</p>
<p>また、この<code>.eslint.js</code>を使うために、<code>@typescript-eslint</code>関連のパッケージが必要なので以下のコマンドでインストールします。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser
</code></pre></div><p>ここまでで<code>ng lint</code>は動くようになるはずです。手元の環境では、<code>app.component.spec.ts</code>でクオートのエラーがでました。</p>
<h2 id="vscodeでも動かしてみる">VSCodeでも動かしてみる</h2>
<p>設定されてるルールが適用されてるか見てみます。サンプルにあった<code>'@typescript-eslint/no-non-null-assertion': 'error'</code>で試してみます。</p>
<p><img src="/img/2020-03-16-18-37-21.png" alt="'@typescript-eslint/no-non-null-assertion&rsquo;: &lsquo;error&rsquo;"></p>
<p>無事Lintされていました。また、画像や動画をとっていないですが、<code>ESLint: Fix all auto-fixable Problems</code>も効きました。</p>
<h2 id="終わり">終わり</h2>
<p>Angular本体のESLint対応も待ち遠しいですが、<code>@angular-eslint/angular-eslint</code>はルールも順次対応していくようなので、とりあえずこちらで良さそうですね</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Auraコンポーネントから特定フィールドのPickListValuesを取得する</title>
      <link>https://mithy.fun/notes/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AEpicklistvalues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</link>
      <pubDate>Mon, 09 Mar 2020 15:54:48 +0900</pubDate>
      
      <guid>https://mithy.fun/notes/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AEpicklistvalues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</guid>
      <description><![CDATA[やりたいこと AuraコンポーネントからオブジェクトのPickListフィールドのPickListValuesを取得したい。具体的には取引先(個人)の敬称フィールドの選択肢を取得したい。 取得する ui-apiかApexコントローラーで取得できそう。ui-apiは試したらCSPが必要だったので、Apexコントローラーで取得する。 単純にやると、Account.Salutation.getDescribe(]]></description>
      <content:encoded><![CDATA[<h2 id="やりたいこと">やりたいこと</h2>
<p>AuraコンポーネントからオブジェクトのPickListフィールドのPickListValuesを取得したい。具体的には取引先(個人)の敬称フィールドの選択肢を取得したい。</p>
<h2 id="取得する">取得する</h2>
<p>ui-apiかApexコントローラーで取得できそう。ui-apiは試したらCSPが必要だったので、Apexコントローラーで取得する。</p>
<p>単純にやると、<code>Account.Salutation.getDescribe().getPicklistValues()</code>でできる。</p>
<p>汎用的にするには</p>
<pre><code class="language-apex" data-lang="apex">SObject sObj = (SObject)Type.forName(sObjectName).newInstance();
Schema.DescribeSObjectResult describeSObj = sObj.getSObjectType().getDescribe();
Schema.SObjectField field = describeSObj.fields.getMap().get(fieldName);
field.getDescribe().getPicklistValues();
</code></pre><p>という感じになる。<code>Schema.DescribeSObjectResult</code>の<code>fields.getMap().get(fieldName)</code>で<code>SObjectField</code>を取得するところが味噌っぽい</p>
<h2 id="参考">参考</h2>
<p><a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_api_calls_platform.htm" target="_blank" rel="nofollow noopener">Making API Calls from Components | Lightning Aura Components Developer Guide | Salesforce Developers</a><br>
<a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_methods_system_sobject_describe.htm" target="_blank" rel="nofollow noopener">DescribeSObjectResult クラス | Apex 開発者ガイド | Salesforce Developers</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>GitHubActionsからSlackへメッセージを送信する</title>
      <link>https://mithy.fun/notes/githubactions%E3%81%8B%E3%82%89slack%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</link>
      <pubDate>Fri, 06 Mar 2020 17:34:24 +0900</pubDate>
      
      <guid>https://mithy.fun/notes/githubactions%E3%81%8B%E3%82%89slack%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</guid>
      <description><![CDATA[どうしてやるの GitHubActions で Salesforce のスクラッチ組織を作成するのワークフローから Slack にログイン URL を送りたかった。 なにを使うか pullreminders/slack-action: GitHub Action for posting Slack messagesを使うことにした。 今気づいたんですが、これ PullPanda のリポジトリだ セットアップ 上記リポジトリの手順通り進める。流れは Slack App を作成 Slack App トークンを GitHub に登録 GitHub Actions のワークフローを作成 です、詳しくは前述したリポジトリの方見てください。 セットアップしていく 1. Slack App を作成 Slack API: Applications | Slackを]]></description>
      <content:encoded><![CDATA[<h2 id="どうしてやるの">どうしてやるの</h2>
<ul>
<li><a href="https://mithy.fun/notes/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/">GitHubActions で Salesforce のスクラッチ組織を作成する</a>のワークフローから Slack にログイン URL を送りたかった。</li>
</ul>
<h2 id="なにを使うか">なにを使うか</h2>
<p><a href="https://github.com/pullreminders/slack-action" target="_blank" rel="nofollow noopener">pullreminders/slack-action: GitHub Action for posting Slack messages</a>を使うことにした。<br>
今気づいたんですが、これ PullPanda のリポジトリだ</p>
<h2 id="セットアップ">セットアップ</h2>
<p>上記リポジトリの手順通り進める。流れは</p>
<ol>
<li>Slack App を作成</li>
<li>Slack App トークンを GitHub に登録</li>
<li>GitHub Actions のワークフローを作成</li>
</ol>
<p>です、詳しくは前述したリポジトリの方見てください。</p>
<h2 id="セットアップしていく">セットアップしていく</h2>
<h3 id="1-slack-app-を作成">1. Slack App を作成</h3>
<p><a href="https://api.slack.com/apps" target="_blank" rel="nofollow noopener">Slack API: Applications | Slack</a>を開いて<code>Create New App</code>ボタンをクリックしてアプリを作成します。今回は AppName を<code>GABot</code>としました。Slack ワークスペースは追加したい場所を選択してください。</p>
<p>メッセージ送信ができるようにアプリに Bot 用の機能を追加します。アプリの Basic Information ページの上部アコーディオンを開き<code>Bots</code>をクリックすると追加できます。</p>
<p>※画像は設定済みのものになります</p>
<p><img src="/img/2020-03-24-16-06-13.png" alt="bot権限を付与"></p>
<p>Slack ワークスペースに アプリをインストールします。
<img src="/img/2020-03-24-16-08-09.png" alt="Slackワークスペースにインストール"></p>
<p>※private チェンネルの場合は、チャンネルの詳細タブを開いてそこからアプリをインストールしてください。</p>
<h3 id="2-slack-app-トークンを-github-に登録">2. Slack App トークンを GitHub に登録</h3>
<p>アプリの OAuth &amp; Permissions ページの Bot User OAuth Access Token をコピーして</p>
<p><img src="/img/2020-03-24-16-19-59.png" alt="Bot User OAuth Access Token"></p>
<p>GitHub の Secrets に登録します。</p>
<p><img src="/img/2020-03-24-16-22-21.png" alt="GitHubのSecretsに登録"></p>
<h3 id="3-github-actions-のワークフローを作成">3. GitHub Actions のワークフローを作成</h3>
<p>簡単なメッセージを送信するワークフローで試してみます。<code>.github/workflows</code>に <code>hello-slack.yml</code>を作成して、以下をコピペします。コピペしたら一番下の行の<code>\&quot;channel\&quot;:\&quot;GM84QDF1P\&quot;</code>を投稿したいチャンネル ID に書き換えます。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>GABotでHelloSlack<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- master<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">hello-slack</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Hello Slack&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">SLACK_BOT_TOKEN</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.GA_BOT_TOKEN<span class="w"> </span>}}<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>pullreminders/slack-action@master<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">args</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{\&#34;channel\&#34;:\&#34;GM84QDF1P\&#34;,\&#34;text\&#34;:\&#34;Hello Slack\&#34;}&#39;</span><span class="w">
</span></code></pre></div><p>以上で GithubActions から Slack へのメッセージ送信の準備はできました。あとは、master ブランチにコミットして push して、Slack チャンネルにメッセージが投稿されることを確認したら完了です。</p>
<h2 id="終わり">終わり</h2>
<p>あとは色々組み合わせよう</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Aura コンポーネントのため Lightning データサービスの基本</title>
      <link>https://mithy.fun/notes/aura-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%81%9F%E3%82%81-lightning-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Wed, 04 Mar 2020 17:47:57 +0900</pubDate>
      
      <guid>https://mithy.fun/notes/aura-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%81%9F%E3%82%81-lightning-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid>
      <description><![CDATA[やる前 force:recordDataを使うと楽にデータを取得、操作できるということでやってみる。 メモ &amp;lt;aura:component implements=&amp;quot;flexipage:availableForRecordHome, force:hasRecordId&amp;quot;&amp;gt;のように、implementsがないとLightningAppBuilderでレコードページへ追加する際に表示されない、ハマった。また、force:hasRecordIdはv.recordIdにアクセスできることを明示できる。force:h]]></description>
      <content:encoded><![CDATA[<h2 id="やる前">やる前</h2>
<p><code>force:recordData</code>を使うと楽にデータを取得、操作できるということでやってみる。</p>
<h2 id="メモ">メモ</h2>
<p><code>&lt;aura:component implements=&quot;flexipage:availableForRecordHome, force:hasRecordId&quot;&gt;</code>のように、implementsがないとLightningAppBuilderでレコードページへ追加する際に表示されない、ハマった。また、<code>force:hasRecordId</code>は<code>v.recordId</code>にアクセスできることを明示できる。<a href="https://developer.salesforce.com/docs/component-library/bundle/force:hasRecordId/documentation" target="_blank" rel="nofollow noopener">force:hasRecordId - documentation - Salesforce Lightning Component Library</a><br>
レコードの保存はこんな感じの関数をボタンのクリック等に紐付けておこなう。<code>recordLoader</code>は<code>force:recordData</code>の<code>aura:id</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">({</span>
    <span class="nx">save</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cmp</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">helper</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">recordLoader</span> <span class="o">=</span> <span class="nx">cmp</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&#34;recordLoader&#34;</span><span class="p">);</span>
        <span class="nx">recordLoader</span><span class="p">.</span><span class="nx">saveRecord</span><span class="p">(</span><span class="nx">$A</span><span class="p">.</span><span class="nx">getCallback</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">saveResult</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">saveResult</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="s2">&#34;ERROR&#34;</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">...</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="p">...</span>
            <span class="p">}</span>
        <span class="p">}));</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
