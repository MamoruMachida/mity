<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>
    Note on 
    Mity
    </title>
    <link>https://mithy.fun/notes/</link>
    <description>Recent content in Note
    on Mity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    
    
    <copyright>&amp;copy;Mamoru Machida 2019</copyright>
    
        <atom:link href="https://mithy.fun/notes/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>@angular-eslint/angular-eslintでAngularのLinterをTSLintからESLintに置き換えてみた</title>
      <link>https://mithy.fun/notes/angular-eslint%E3%81%A7angular%E3%81%AElinter%E3%82%92tslint%E3%81%8B%E3%82%89eslint%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 16 Mar 2020 12:06:21 +0900</pubDate>
      
      <guid>https://mithy.fun/notes/angular-eslint%E3%81%A7angular%E3%81%AElinter%E3%82%92tslint%E3%81%8B%E3%82%89eslint%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description><![CDATA[モチベーション 各所でtslintからeslintの移行が進んでるのと、vscodeのeslintフォーマッターを使いたかった。 移行手順 ng newしたところから始めます。AngularCLIのバージョンは9.0.6でした。 パッケージのインストール まず、@angular-eslint/angular-eslintのパッケージをインストールします。 angular-eslint/angular-eslint: Monorepo for all the tooling related to using ESLint with Angular npm i -D eslint \ @angular-eslint/builder \ @angular-eslint/eslint-plugin \ @angular-eslint/template-parser \ @angular-eslint/eslint-plugin-template コマンドと]]></description>
      <content:encoded><![CDATA[<h2 id="モチベーション">モチベーション</h2>
<p>各所でtslintからeslintの移行が進んでるのと、vscodeのeslintフォーマッターを使いたかった。</p>
<h2 id="移行手順">移行手順</h2>
<p><code>ng new</code>したところから始めます。AngularCLIのバージョンは<code>9.0.6</code>でした。</p>
<h3 id="パッケージのインストール">パッケージのインストール</h3>
<p>まず、@angular-eslint/angular-eslintのパッケージをインストールします。
<a href="https://github.com/angular-eslint/angular-eslint" target="_blank" rel="nofollow noopener">angular-eslint/angular-eslint: Monorepo for all the tooling related to using ESLint with Angular</a></p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">npm i -D eslint <span class="se">\
</span><span class="se"></span>  @angular-eslint/builder <span class="se">\
</span><span class="se"></span>  @angular-eslint/eslint-plugin <span class="se">\
</span><span class="se"></span>  @angular-eslint/template-parser <span class="se">\
</span><span class="se"></span>  @angular-eslint/eslint-plugin-template
</code></pre></div><h3 id="コマンドとeslintの設定を修正">コマンドとESLintの設定を修正</h3>
<p>前述したリポジトリに手順もありますが、各設定ファイルのサンプルがあったので、それを参考に<code>angular.json</code>を修正、<strong><code>.eslintrc.js</code></strong>を追加しました。angular.jsonの差分はこんな感じ<br>
<img src="/img/2020-03-16-12-41-16.png" alt="angular.jsonの差分"></p>
<p><code>.eslint.js</code>のサンプルは
<a href="https://github.com/angular-eslint/angular-eslint/blob/master/packages/integration-tests/fixtures/angular-cli-workspace/.eslintrc.js" target="_blank" rel="nofollow noopener">ここ</a>からいただきました。</p>
<p>また、この<code>.eslint.js</code>を使うために、<code>@typescript-eslint</code>関連のパッケージが必要なので以下のコマンドでインストールします。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">npm i -D @typescript-eslint/eslint-plugin <span class="se">\
</span><span class="se"></span>  @typescript-eslint/parser
</code></pre></div><p>ここまでで<code>ng lint</code>は動くようになるはずです。手元の環境では、<code>app.component.spec.ts</code>でクオートのエラーがでました。</p>
<h2 id="vscodeでも動かしてみる">VSCodeでも動かしてみる</h2>
<p>設定されてるルールが適用されてるか見てみます。サンプルにあった<code>'@typescript-eslint/no-non-null-assertion': 'error'</code>で試してみます。</p>
<p><img src="/img/2020-03-16-18-37-21.png" alt="'@typescript-eslint/no-non-null-assertion&rsquo;: &lsquo;error&rsquo;"></p>
<p>画像や動画をとっていないですが、<code>ESLint: Fix all auto-fixable Problems</code>も効きました。</p>
<h2 id="終わり">終わり</h2>
<p>Angular本体のESLint対応も待ち遠しいですが、とりあえずは<code>@angular-eslint/angular-eslint</code>で良いなと思いました。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[読んでいる]DL版 RustではじめるOpenGL</title>
      <link>https://mithy.fun/notes/dl%E7%89%88rust%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8Bopengl/</link>
      <pubDate>Tue, 12 Nov 2019 15:27:44 +0900</pubDate>
      
      <guid>https://mithy.fun/notes/dl%E7%89%88rust%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8Bopengl/</guid>
      <description><![CDATA[[DL版] RustではじめるOpenGL - toyamaguchi - BOOTH]]></description>
      <content:encoded><![CDATA[<h2 id="dl版-rustではじめるopengl---toyamaguchi---boothhttpstoyamaguchiboothpmitems1557536"><a href="https://toyamaguchi.booth.pm/items/1557536" target="_blank" rel="nofollow noopener">[DL版] RustではじめるOpenGL - toyamaguchi - BOOTH</a></h2>
]]></content:encoded>
    </item>
    
    <item>
      <title>MySQL JSON型の集計</title>
      <link>https://mithy.fun/notes/mysql-json/</link>
      <pubDate>Tue, 12 Mar 2019 14:09:17 +0900</pubDate>
      
      <guid>https://mithy.fun/notes/mysql-json/</guid>
      <description><![CDATA[MySQLのJSON型に対するクエリを書く際に苦労したので、それのメモを。 このページ内で、オブジェクト型、配列型という言葉が出てきますが、造語です。一般的には通じません。 tl;dr JSON_TABLE関数を使用するために、MySQLのバージョンを8以上にする。 集計対象のJSON型のデータ構造を、集計に適した形にする。 込み入った集計を必要とする場合は、このページの配列型のようなデータ構造のほうが良さそう。 J]]></description>
      <content:encoded><![CDATA[<p>MySQLのJSON型に対するクエリを書く際に苦労したので、それのメモを。<br>
このページ内で、オブジェクト型、配列型という言葉が出てきますが、造語です。一般的には通じません。</p>
<h2 id="tldr">tl;dr</h2>
<ul>
<li><code>JSON_TABLE</code>関数を使用するために、MySQLのバージョンを8以上にする。</li>
<li>集計対象のJSON型のデータ構造を、集計に適した形にする。
<ul>
<li>込み入った集計を必要とする場合は、このページの<a href="#%e9%85%8d%e5%88%97%e5%9e%8b">配列型</a>のようなデータ構造のほうが良さそう。</li>
</ul>
</li>
<li><code>JSON_TABLE</code>が使用できない場合は、取得したあとに集計処理をするほうが簡潔。
<ul>
<li>ただ、リソースがきつい</li>
</ul>
</li>
</ul>
<h2 id="環境">環境</h2>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">target_table</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">bigint</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="n">unsigned</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="o">`</span><span class="n">info</span><span class="o">`</span> <span class="n">json</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>
</code></pre></div><p>次に、<code>target_table.info</code>のデータ構造別に集計処理のための前処理的なクエリを作成してみる。</p>
<h2 id="オブジェクト型">オブジェクト型</h2>
<div class="highlight"><pre class="chroma"><code class="language-オブジェクト型.json" data-lang="オブジェクト型.json"><span class="p">{</span>
  <span class="nt">&#34;1&#34;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&#34;0&#34;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&#34;foo&#34;</span><span class="p">:</span> <span class="mi">100</span><span class="p">}},</span>
  <span class="nt">&#34;2&#34;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&#34;0&#34;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&#34;foo&#34;</span><span class="p">:</span> <span class="mi">200</span><span class="p">}},</span>
  <span class="err">...</span>
<span class="p">}</span>
</code></pre></div><p>こんな感じのデータ構造、厄介な形だとおもう。
こみいった集計をするには↓のようなデータを取得したくなる</p>
<table>
<thead>
<tr>
<th>key1</th>
<th>key2</th>
<th>foo</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>0</td>
<td>100</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>200</td>
</tr>
</tbody>
</table>
<p>クエリはこんな感じになった</p>
<div class="highlight"><pre class="chroma"><code class="language-オブジェクト型集計.sql" data-lang="オブジェクト型集計.sql"><span class="k">SELECT</span>
  <span class="n">key1table</span><span class="p">.</span><span class="n">key1</span><span class="p">,</span>
  <span class="n">key2list</span><span class="p">.</span><span class="n">key2</span><span class="p">,</span>
  <span class="nf">JSON_EXTRACT</span><span class="p">(</span><span class="n">key1table</span><span class="p">.</span><span class="n">key1value</span><span class="p">,</span> <span class="nf">CONCAT</span><span class="p">(</span><span class="s1">&#39;$.&#34;&#39;</span><span class="p">,</span> <span class="n">key2list</span><span class="p">.</span><span class="n">key2</span><span class="p">,</span> <span class="s1">&#39;&#34;.foo&#39;</span><span class="p">))</span> <span class="k">AS</span> <span class="n">foo</span>
<span class="k">FROM</span>
  <span class="p">(</span>
    <span class="k">SELECT</span>
      <span class="n">key1list</span><span class="p">.</span><span class="n">key1</span><span class="p">,</span>
      <span class="nf">JSON_EXTRACT</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="nf">CONCAT</span><span class="p">(</span><span class="s1">&#39;$.&#34;&#39;</span><span class="p">,</span> <span class="n">key1list</span><span class="p">.</span><span class="n">key1</span><span class="p">,</span> <span class="s1">&#39;&#34;&#39;</span><span class="p">))</span> <span class="k">AS</span> <span class="n">key1value</span>
    <span class="k">FROM</span>
      <span class="n">target_table</span><span class="p">,</span>
      <span class="nf">JSON_TABLE</span> <span class="p">(</span>
        <span class="nf">JSON_KEYS</span><span class="p">(</span><span class="n">info</span><span class="p">),</span>
        <span class="s1">&#39;$[*]&#39;</span> <span class="nf">COLUMNS</span> <span class="p">(</span><span class="n">key1</span> <span class="kt">INT</span> <span class="n">PATH</span> <span class="s1">&#39;$&#39;</span><span class="p">)</span>
      <span class="p">)</span> <span class="k">AS</span> <span class="n">key1list</span>
  <span class="p">)</span> <span class="k">AS</span> <span class="n">key1table</span><span class="p">,</span>
  <span class="nf">JSON_TABLE</span><span class="p">(</span>
    <span class="nf">JSON_KEYS</span><span class="p">(</span><span class="n">key1table</span><span class="p">.</span><span class="n">key1value</span><span class="p">),</span>
    <span class="s1">&#39;$[*]&#39;</span> <span class="nf">COLUMNS</span> <span class="p">(</span><span class="n">key2</span> <span class="kt">INT</span> <span class="n">PATH</span> <span class="s1">&#39;$&#39;</span><span class="p">)</span>
  <span class="p">)</span> <span class="k">AS</span> <span class="n">key2list</span>
<span class="p">;</span>
</code></pre></div><p>SQL力の低さも相まってか、大げさなクエリになった。サブクエリじゃないにしてもテーブルを結合する必要が有りそう。</p>
<p>以下、テストデータ作成用</p>
<div class="highlight"><pre class="chroma"><code class="language-オブジェクト型データ挿入.sql" data-lang="オブジェクト型データ挿入.sql"><span class="k">DROP</span> <span class="k">PROCEDURE</span> <span class="k">IF</span> <span class="k">EXISTS</span> <span class="n">loop_insert_record</span><span class="p">;</span>
<span class="n">DELIMITER</span> <span class="o">//</span>
<span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="nf">loop_insert_record</span><span class="p">(</span><span class="k">IN</span> <span class="n">x</span> <span class="kt">INT</span><span class="p">)</span>
<span class="n">BEGIN</span>
  <span class="k">DECLARE</span> <span class="n">i</span> <span class="kt">INT</span><span class="p">;</span>
  <span class="k">DECLARE</span> <span class="n">info</span> <span class="kt">CHAR</span><span class="p">;</span>
  <span class="kt">SET</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">WHILE</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="n">DO</span>
    <span class="kt">SET</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">target_table</span><span class="o">`</span> <span class="p">(</span><span class="n">info</span><span class="p">)</span> <span class="nf">VALUE</span> <span class="p">(</span>
        <span class="k">REPLACE</span><span class="p">(</span>
          <span class="k">REPLACE</span><span class="p">(</span>
            <span class="s1">&#39;{&#34;1&#34;: {&#34;0&#34;: {&#34;foo&#34;: %d1}}, &#34;2&#34;: {&#34;0&#34;: {&#34;foo&#34;: %d2}}}&#39;</span><span class="p">,</span>
            <span class="s1">&#39;%d1&#39;</span><span class="p">,</span>
            <span class="k">CONVERT</span><span class="p">(</span><span class="nf">ROUND</span><span class="p">(</span><span class="nf">RAND</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">),</span> <span class="kt">CHAR</span><span class="p">)</span>
          <span class="p">),</span>
          <span class="s1">&#39;%d2&#39;</span><span class="p">,</span>
          <span class="k">CONVERT</span><span class="p">(</span><span class="nf">ROUND</span><span class="p">(</span><span class="nf">RAND</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">),</span> <span class="kt">CHAR</span><span class="p">)</span>
        <span class="p">)</span>
      <span class="p">);</span>
  <span class="n">END</span> <span class="k">WHILE</span><span class="p">;</span>
<span class="n">END</span>
<span class="o">//</span>
<span class="n">delimiter</span> <span class="p">;</span>
<span class="k">call</span> <span class="nf">lop_insert_record</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</code></pre></div><h2 id="配列型">配列型</h2>
<div class="highlight"><pre class="chroma"><code class="language-配列型.json" data-lang="配列型.json"><span class="p">[</span>
  <span class="p">{</span>
    <span class="nt">&#34;key1&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&#34;objectList1&#34;</span><span class="p">:</span> <span class="p">[{</span><span class="nt">&#34;key2&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nt">&#34;objectList2&#34;</span><span class="p">:</span> <span class="p">[{</span><span class="nt">&#34;foo&#34;</span><span class="p">:</span> <span class="mi">100</span><span class="p">}]}]</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nt">&#34;key1&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&#34;objectList1&#34;</span><span class="p">:</span> <span class="p">[{</span><span class="nt">&#34;key2&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nt">&#34;objectList2&#34;</span><span class="p">:</span> <span class="p">[{</span><span class="nt">&#34;foo&#34;</span><span class="p">:</span> <span class="mi">200</span><span class="p">}]},</span> <span class="p">{</span><span class="nt">&#34;key2&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nt">&#34;objectList2&#34;</span><span class="p">:</span> <span class="p">[{</span><span class="nt">&#34;foo&#34;</span><span class="p">:</span> <span class="mi">200</span><span class="p">}]}]</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></div><p><code>JSON_TABLE</code>で集計しやすい形だと思ってる。
前項と同様に、集計を行う際には↓ようなデータを取得したい。</p>
<table>
<thead>
<tr>
<th>key1</th>
<th>key2</th>
<th>foo</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>0</td>
<td>100</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>200</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre class="chroma"><code class="language-配列型集計.sql" data-lang="配列型集計.sql"><span class="k">SELECT</span>
  <span class="n">it</span><span class="p">.</span><span class="o">*</span>
<span class="k">FROM</span>
  <span class="n">target_table</span> <span class="n">tt</span><span class="p">,</span>
  <span class="nf">JSON_TABLE</span> <span class="p">(</span>
    <span class="n">tt</span><span class="p">.</span><span class="n">info</span><span class="p">,</span>
    <span class="s1">&#39;$[*]&#39;</span> <span class="nf">COLUMNS</span> <span class="p">(</span>
      <span class="n">key1</span> <span class="kt">INT</span> <span class="n">PATH</span> <span class="s1">&#39;$.&#34;key1&#34;&#39;</span><span class="p">,</span>
      <span class="n">NESTED</span> <span class="n">PATH</span> <span class="s1">&#39;$.&#34;objectList1&#34;[*]&#39;</span> <span class="nf">COLUMNS</span> <span class="p">(</span>
        <span class="n">key2</span> <span class="kt">INT</span> <span class="n">PATH</span> <span class="s1">&#39;$.&#34;key2&#34;&#39;</span><span class="p">,</span>
        <span class="n">NESTED</span> <span class="n">PATH</span> <span class="s1">&#39;$.&#34;objectList2&#34;[*]&#39;</span> <span class="nf">COLUMNS</span> <span class="p">(</span>
          <span class="n">foo</span> <span class="kt">INT</span> <span class="n">PATH</span> <span class="s1">&#39;$.&#34;foo&#34;&#39;</span>
        <span class="p">)</span>
      <span class="p">)</span>
    <span class="p">)</span>
  <span class="p">)</span> <span class="k">AS</span> <span class="n">it</span><span class="p">;</span>
</code></pre></div><p>簡潔に書けた。</p>
<p>以下、テストデータ作成用</p>
<div class="highlight"><pre class="chroma"><code class="language-配列型データ挿入.sql" data-lang="配列型データ挿入.sql"><span class="k">DROP</span> <span class="k">PROCEDURE</span> <span class="k">IF</span> <span class="k">EXISTS</span> <span class="n">loop_insert_record</span><span class="p">;</span>
<span class="n">DELIMITER</span> <span class="o">//</span>
<span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="nf">loop_insert_record</span><span class="p">(</span><span class="k">IN</span> <span class="n">x</span> <span class="kt">INT</span><span class="p">)</span>
<span class="n">BEGIN</span>
  <span class="k">DECLARE</span> <span class="n">i</span> <span class="kt">INT</span><span class="p">;</span>
  <span class="k">DECLARE</span> <span class="n">info</span> <span class="kt">CHAR</span><span class="p">;</span>
  <span class="kt">SET</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">WHILE</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="n">DO</span>
    <span class="kt">SET</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">target_table</span><span class="o">`</span> <span class="p">(</span><span class="n">info</span><span class="p">)</span> <span class="nf">VALUE</span> <span class="p">(</span>
        <span class="k">REPLACE</span><span class="p">(</span>
          <span class="k">REPLACE</span><span class="p">(</span>
            <span class="s1">&#39;[{&#34;key1&#34;: 1, &#34;objectList1&#34;: [{&#34;key2&#34;: &#34;0&#34;, &#34;objectList2&#34;: [{&#34;foo&#34;: %d1}]}]}, {&#34;key1&#34;: &#34;2&#34;, &#34;objectList1&#34;: [{&#34;key2&#34;: &#34;0&#34;, &#34;objectList2&#34;: [{&#34;foo&#34;: %d2}]}, {&#34;key2&#34;: &#34;1&#34;, &#34;objectList2&#34;: [{&#34;foo&#34;: %d1}]}]}]&#39;</span><span class="p">,</span> 
            <span class="s1">&#39;%d1&#39;</span><span class="p">,</span>
            <span class="k">CONVERT</span><span class="p">(</span><span class="nf">ROUND</span><span class="p">(</span><span class="nf">RAND</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">),</span> <span class="kt">CHAR</span><span class="p">)</span>
          <span class="p">),</span>
          <span class="s1">&#39;%d2&#39;</span><span class="p">,</span>
          <span class="k">CONVERT</span><span class="p">(</span><span class="nf">ROUND</span><span class="p">(</span><span class="nf">RAND</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">),</span> <span class="kt">CHAR</span><span class="p">)</span>
        <span class="p">)</span>
      <span class="p">);</span>
  <span class="n">END</span> <span class="k">WHILE</span><span class="p">;</span>
<span class="n">END</span>
<span class="o">//</span>
<span class="n">delimiter</span> <span class="p">;</span>
<span class="k">call</span> <span class="nf">loop_insert_record</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</code></pre></div><h2 id="おわりに">おわりに</h2>
<p><code>JSON_TABLE</code>に最適化していくのが吉だと思ったので、積極的に配列型のような形にしていきたい。
オブジェクト型は、中身のデータ構造を気にせずに、キーの有無が大事になる場合が使いどころかな。</p>
<h2 id="参考">参考</h2>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html" target="_blank" rel="nofollow noopener">MySQL :: MySQL 8.0 Reference Manual :: 12.17.1 JSON Function Reference</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://mithy.fun/notes/hello/</link>
      <pubDate>Thu, 31 Jan 2019 17:43:40 +0900</pubDate>
      
      <guid>https://mithy.fun/notes/hello/</guid>
      <description><![CDATA[hello&amp;mdash;:]]></description>
      <content:encoded><![CDATA[<p>hello&mdash;:</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
