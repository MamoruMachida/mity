<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>
    Memos on 
    Mity
    </title>
    <link>https://mithy.fun/memos/</link>
    <description>Recent content in Memos
    on Mity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    
    
    <copyright>&amp;copy;Mamoru Machida 2019</copyright>
    
        <atom:link href="https://mithy.fun/memos/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Auraコンポーネントから特定フィールドのPickListValuesを取得する</title>
      <link>https://mithy.fun/memos/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AEpicklistvalues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</link>
      <pubDate>Mon, 09 Mar 2020 15:54:48 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AEpicklistvalues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</guid>
      <description>やりたいこと AuraコンポーネントからオブジェクトのPickListフィールドのPickListValuesを取得したい。具体的には取引先(個人)の敬称フィールドの選択肢を取得したい。 取得する ui-apiかApexコントローラーで取得できそう。ui-apiは試したらCSPが必要だったので、Apexコントローラーで取得する。 単純にやると、Account.Salutation.getDescribe(</description>
      <content:encoded><h2 id="やりたいこと">やりたいこと</h2>
<p>AuraコンポーネントからオブジェクトのPickListフィールドのPickListValuesを取得したい。具体的には取引先(個人)の敬称フィールドの選択肢を取得したい。</p>
<h2 id="取得する">取得する</h2>
<p>ui-apiかApexコントローラーで取得できそう。ui-apiは試したらCSPが必要だったので、Apexコントローラーで取得する。</p>
<p>単純にやると、<code>Account.Salutation.getDescribe().getPicklistValues()</code>でできる。</p>
<p>汎用的にするには</p>
<pre><code class="language-apex" data-lang="apex">SObject sObj = (SObject)Type.forName(sObjectName).newInstance();
Schema.DescribeSObjectResult describeSObj = sObj.getSObjectType().getDescribe();
Schema.SObjectField field = describeSObj.fields.getMap().get(fieldName);
field.getDescribe().getPicklistValues();
</code></pre><p>という感じになる。<code>Schema.DescribeSObjectResult</code>の<code>fields.getMap().get(fieldName)</code>で<code>SObjectField</code>を取得するところが味噌っぽい</p>
<h2 id="参考">参考</h2>
<p><a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_api_calls_platform.htm">Making API Calls from Components | Lightning Aura Components Developer Guide | Salesforce Developers</a><br>
<a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_methods_system_sobject_describe.htm">DescribeSObjectResult クラス | Apex 開発者ガイド | Salesforce Developers</a></p>
</content:encoded>
    </item>
    
    <item>
      <title>Aura コンポーネントのため Lightning データサービスの基本</title>
      <link>https://mithy.fun/memos/aura-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%81%9F%E3%82%81-lightning-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Wed, 04 Mar 2020 17:47:57 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/aura-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%81%9F%E3%82%81-lightning-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid>
      <description>やる前 force:recordDataを使うと楽にデータを取得、操作できるということでやってみる。 メモ &amp;lt;aura:component implements=&amp;quot;flexipage:availableForRecordHome, force:hasRecordId&amp;quot;&amp;gt;のように、implementsがないとLightningAppBuilderでレコードページへ追加する際に表示されない、ハマった。また、force:hasRecordIdはv.recordIdにアクセスできることを明示できる。force:h</description>
      <content:encoded><h2 id="やる前">やる前</h2>
<p><code>force:recordData</code>を使うと楽にデータを取得、操作できるということでやってみる。</p>
<h2 id="メモ">メモ</h2>
<p><code>&lt;aura:component implements=&quot;flexipage:availableForRecordHome, force:hasRecordId&quot;&gt;</code>のように、implementsがないとLightningAppBuilderでレコードページへ追加する際に表示されない、ハマった。また、<code>force:hasRecordId</code>は<code>v.recordId</code>にアクセスできることを明示できる。<a href="https://developer.salesforce.com/docs/component-library/bundle/force:hasRecordId/documentation">force:hasRecordId - documentation - Salesforce Lightning Component Library</a><br>
レコードの保存はこんな感じの関数をボタンのクリック等に紐付けておこなう。<code>recordLoader</code>は<code>force:recordData</code>の<code>aura:id</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">({</span>
    <span class="nx">save</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cmp</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">helper</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">recordLoader</span> <span class="o">=</span> <span class="nx">cmp</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&#34;recordLoader&#34;</span><span class="p">);</span>
        <span class="nx">recordLoader</span><span class="p">.</span><span class="nx">saveRecord</span><span class="p">(</span><span class="nx">$A</span><span class="p">.</span><span class="nx">getCallback</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">saveResult</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">saveResult</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="s2">&#34;ERROR&#34;</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">...</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="p">...</span>
            <span class="p">}</span>
        <span class="p">}));</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></content:encoded>
    </item>
    
    <item>
      <title>GitHubActionsでSalesforceのスクラッチ組織を作成する</title>
      <link>https://mithy.fun/memos/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 27 Feb 2020 16:05:09 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</guid>
      <description>どうしてやるの ワンアクションで確認用のスクラッチ組織を作成できるワークフローがほしかった。 GitHubActionsが正式リリースされた。 ワークフローの流れ ソースをチェックアウト SFDXのセットアップ DevHub認証 スクラッチ組織を作成、セットアップ ログイン用のURLを表示する 完成品 完成品のコードです、このままコピペするだけじゃ使えません。2. SFDXのセットアップと3. DevHubへログインする</description>
      <content:encoded><h2 id="どうしてやるの">どうしてやるの</h2>
<ul>
<li>ワンアクションで確認用のスクラッチ組織を作成できるワークフローがほしかった。</li>
<li>GitHubActionsが正式リリースされた。</li>
</ul>
<h2 id="ワークフローの流れ">ワークフローの流れ</h2>
<ol>
<li>ソースをチェックアウト</li>
<li>SFDXのセットアップ</li>
<li>DevHub認証</li>
<li>スクラッチ組織を作成、セットアップ</li>
<li>ログイン用のURLを表示する</li>
</ol>
<h2 id="完成品">完成品</h2>
<p>完成品のコードです、このままコピペするだけじゃ使えません。<code>2. SFDXのセットアップ</code>と<code>3. DevHubへログインする</code>をする必要があります。<br>
フック条件はmasterブランチのpushになっています。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>スクラッチ組織の情報をリストアする<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- master<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">env</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">PROJECT_PREFIX</span><span class="p">:</span><span class="w"> </span>ci-dev<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Checkout source code&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;node_modulesのキャッシュがあったら使う。&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">id</span><span class="p">:</span><span class="w"> </span>app-cache-npm<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/cache@v1<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">path</span><span class="p">:</span><span class="w"> </span>node_modules<span class="w">
</span><span class="w">          </span><span class="k">key</span><span class="p">:</span><span class="w"> </span>npm-${{<span class="w"> </span>hashFiles(<span class="s1">&#39;**/package-lock.json&#39;</span>)<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">restore-keys</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">            npm-${{ env.app-cache-name }}-</span><span class="w">
</span><span class="w">            </span>npm<span class="sd">-
</span><span class="sd">      - name: &#39;npm ciを実行&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="p">:</span><span class="w"> </span>steps.app-cache-npm.outputs.cache-hit<span class="w"> </span>!=<span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npm<span class="w"> </span>ci<span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;sfdxが使えるかテスト&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>--help<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Secretsに登録したSfdx Auth Urlをファイルへ出力&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>echo<span class="w"> </span>${{<span class="w"> </span>secrets.SFDX_AUTH_URL<span class="w"> </span>}}<span class="w"> </span>&gt;<span class="w"> </span>./SFDX_AUTH_URL.txt<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Salesforce組織の認証を得る&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>force<span class="p">:</span>auth<span class="p">:</span>sfdxurl<span class="p">:</span>store<span class="w"> </span>-f<span class="w"> </span>./SFDX_AUTH_URL.txt<span class="w"> </span>-d<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;スクラッチ組織の作成&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>force<span class="p">:</span>org<span class="p">:</span>create<span class="w"> </span>-f<span class="w"> </span>config/project-scratch-def.json<span class="w"> </span>-a<span class="w"> </span>TestScratchOrg<span class="w"> </span>-d<span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースをプッシュ&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>force<span class="p">:</span>source<span class="p">:</span>push<span class="w"> </span>-u<span class="w"> </span>TestScratchOrg<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;パスワードを発行&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>force<span class="p">:</span>user<span class="p">:</span>password<span class="p">:</span>generate<span class="w"> </span>-u<span class="w"> </span>TestScratchOrg<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ID/PWからログインURLを作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">shell</span><span class="p">:</span><span class="w"> </span>bash<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">          ORG_INFO=$(npx sfdx force:org:display -u TestScratchOrg --json | jq .result)</span><span class="w">
</span><span class="w">          </span>INSTANCE_URL=$(echo<span class="w"> </span>$ORG_INFO<span class="w"> </span>|<span class="w"> </span>jq<span class="w"> </span>.instanceUrl)<span class="w">
</span><span class="w">          </span>USER_NAME=$(echo<span class="w"> </span>$ORG_INFO<span class="w"> </span>|<span class="w"> </span>jq<span class="w"> </span>.username)<span class="w">
</span><span class="w">          </span>PASSWORD=$(echo<span class="w"> </span>$ORG_INFO<span class="w"> </span>|<span class="w"> </span>jq<span class="w"> </span>.password)<span class="w">
</span><span class="w">          </span>echo<span class="w"> </span><span class="s2">&#34;##[set-output name=login-url;]$(echo ${INSTANCE_URL}?un=${USER_NAME}\&amp;pw=${PASSWORD})&#34;</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;期限のないログインURLを表示&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>echo<span class="w"> </span>${{<span class="w"> </span>steps.make-login-url.outputs.login-url<span class="w"> </span>}}<span class="w">
</span></code></pre></div><h2 id="各ステップについてなど">各ステップについてなど</h2>
<h3 id="ファイル作成と1-ソースコードのチェックアウト">ファイル作成と1. ソースコードのチェックアウト</h3>
<p><a href="https://help.github.com/ja/actions/configuring-and-managing-workflows/configuring-a-workflow#creating-a-workflow-file">ワークフローを設定する - GitHub ヘルプ</a>に沿って<code>.github/workflows</code>フォルダ内へ適当にワークフローファイルを設置します。今回は<code>create-scratch-org.yml</code>とします。<br>
ついでにソースコードのチェックアウトまで書いてしまいます。<a href="https://github.com/actions/checkout">actions/checkout@v2</a>はデフォルトでmasterブランチを、push等のブランチ系アクション場合は対象ブランチをチェックアウトします。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>スクラッチ組織を作成します。<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- master<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Checkout source code&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span></code></pre></div><h3 id="2-sfdxのセットアップ">2. SFDXのセットアップ</h3>
<p>SFDXとは<a href="https://developer.salesforce.com/ja/tools/sfdxcli">Salesforce CLI</a>のことです、<code>Salesforce</code>がコマンドライン上から操作できるものです。<br>
通常のセットアップでは、上記リンクからダウンロードしてインストール、npmやbrewによるインストールがあります。GitHubActionsのワークフロー上でも同様の手順でセットアップできます。<br>
今回はnpmを使います。そのため<code>package.json</code>を作成する必要がありますが、これが嫌な場合や、npmが使えない場合は<a href="https://github.com/sfdx-actions/setup-sfdx">sfdx-actions/setup-sfdx</a>や<a href="https://github.com/forcedotcom/salesforcedx-actions">forcedotcom/salesforcedx-actions</a>を使うのも良さそうです。<br>
npmでsfdxをインストールするためには以下のコマンドをたたきます。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1">## package.jsonが存在しない場合は作成する</span>
npm init --yes

npm i -D sfdx
</code></pre></div><p>すると<code>package.json</code>と<code>package-lock.json</code>が追加されているはずなのでコミットなりステージングなりしておきます。</p>
<p>ワークフローのstepsを追記します。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="w">  </span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Checkout source code&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;node_modulesのキャッシュがあれば使う&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">id</span><span class="p">:</span><span class="w"> </span>app-cache-npm<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/cache@v1<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">path</span><span class="p">:</span><span class="w"> </span>node_modules<span class="w">
</span><span class="w">          </span><span class="k">key</span><span class="p">:</span><span class="w"> </span>npm-${{<span class="w"> </span>hashFiles(<span class="s1">&#39;**/package-lock.json&#39;</span>)<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">restore-keys</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">            npm-${{ env.app-cache-name }}-</span><span class="w">
</span><span class="w">            </span>npm<span class="sd">-
</span><span class="sd">
</span><span class="sd">      - name: &#39;npm ciを実行&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="p">:</span><span class="w"> </span>steps.app-cache-npm.outputs.cache-hit<span class="w"> </span>!=<span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npm<span class="w"> </span>ci<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;sfdxが使えるかテスト&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>--help<span class="w">
</span></code></pre></div><p>これでsfdxコマンドがワークフロー上で使えるようになりました。</p>
<h3 id="3-devhub認証">3. DevHub認証</h3>
<p>DevHubの用意が必要です。<a href="https://developer.salesforce.com/docs/atlas.ja-jp.sfdx_setup.meta/sfdx_setup/sfdx_setup_enable_devhub.html">組織での Dev Hub の有効化 | Salesforce DX 設定ガイド | Salesforce Developers</a><br>
sfdxでコマンドラインで完結する認証コマンドは<code>force:auth:sfdxurl:store</code>のみ？のようなのでこれを使います。このコマンドは<code>Sfdx Auth Url</code>を使うため、手元の環境で組織の認証をしておく必要があります。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1">## DevHubを使う組織を認証する。</span>
sfdx force:auth:web:login -a ForGitHubAction

<span class="c1">## --verboseを付けるとSfdx Auth Urlが表示されます</span>
sfdx force:org:display --verbose -u ForGitHubAction
</code></pre></div><p><code>Sfdx Auth Url</code>をコピペして、GitHubリポジトリのSecretsに登録しておきます。ワークフローファイルや、リポジトリ内ファイルへのベタ書きはやめたほうが良さそうです。Secretsについては<a href="https://help.github.com/ja/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets#using-encrypted-secrets-in-a-workflow">暗号化されたシークレットの作成と保存 - GitHub ヘルプ</a>を。<br>
Secretsの登録はGitHubのリポジトリページのSettings &gt; Secretsからできます。</p>
<p><img src="/img/2020-03-03-17-01-54.png" alt="Secrets画面"></p>
<p>Nameはワークフローからの呼び出しの際に使うのでわかりやすいものを、今回は<code>SFDX_AUTH_URL</code>としました。<br>
ワークフローファイルを追記します。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="w">  </span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="c"># 省略</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Secretsに登録したSfdx Auth Urlをファイルへ出力&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;echo ${{ secrets.SFDX_AUTH_URL }} &gt; ./SFDX_AUTH_URL.txt&#39;</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Salesforce組織の認証を得る&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;npx sfdx force:auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -d&#39;</span><span class="w">
</span></code></pre></div><h3 id="4-スクラッチ組織を作成セットアップ">4. スクラッチ組織を作成、セットアップ</h3>
<p>スクラッチ組織のセットアップを行います。例としてはこんな感じになるかと思います。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="w">  </span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="c"># 省略</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;スクラッチ組織の作成&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>force<span class="p">:</span>org<span class="p">:</span>create<span class="w"> </span>-f<span class="w"> </span>config/project-scratch-def.json<span class="w"> </span>-a<span class="w"> </span>TestScratchOrg<span class="w"> </span>-d<span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースをプッシュ&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>force<span class="p">:</span>source<span class="p">:</span>push<span class="w"> </span>-u<span class="w"> </span>TestScratchOrg<span class="w">
</span></code></pre></div><p>スクラッチ組織は作成上限があるので、期限は一日としています。<br>
<code>config/project-scratch-def.json</code>がない場合は、<a href="https://developer.salesforce.com/docs/atlas.ja-jp.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_def_file_config_values.htm">スクラッチ組織定義の設定値</a>を参考にしてください。一応下に最低限の物を置いておきます。</p>
<div class="highlight"><pre class="chroma"><code class="language-json:config/project-scratch-def.json" data-lang="json:config/project-scratch-def.json"><span class="p">{</span>
  <span class="nt">&#34;orgName&#34;</span><span class="p">:</span> <span class="s2">&#34;testOrg&#34;</span><span class="p">,</span>
  <span class="nt">&#34;edition&#34;</span><span class="p">:</span> <span class="s2">&#34;Developer&#34;</span><span class="p">,</span>
  <span class="nt">&#34;features&#34;</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div><h3 id="5-ログイン用のurlを表示する">5. ログイン用のURLを表示する</h3>
<p>確認しやすくするために、ログイン用のURLも表示しておきます。<br>
<code>sfdx force:org:open -r</code>でインスタントなログインURLを取得できますが、恒久的にログインしたかったので、そちらも載せています。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="w">  </span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu-latest<span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="c"># 省略</span><span class="w">
</span><span class="w">      </span><span class="c">## 期限が短いログインURLを表示</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ログインURLの表示、期限が短い&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>force<span class="p">:</span>org<span class="p">:</span>open<span class="w"> </span>-r<span class="w"> </span>-u<span class="w"> </span>TestScratchOrg<span class="w">
</span><span class="w">
</span><span class="w">      </span><span class="c">## 期限のないログインURLを作成する</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;パスワードを発行&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>npx<span class="w"> </span>sfdx<span class="w"> </span>force<span class="p">:</span>user<span class="p">:</span>password<span class="p">:</span>generate<span class="w"> </span>-u<span class="w"> </span>TestScratchOrg<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ID/PWからログインURLを作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">shell</span><span class="p">:</span><span class="w"> </span>bash<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">          ORG_INFO=$(npx sfdx force:org:display -u TestScratchOrg --json | jq .result)</span><span class="w">
</span><span class="w">          </span>INSTANCE_URL=$(echo<span class="w"> </span>$ORG_INFO<span class="w"> </span>|<span class="w"> </span>jq<span class="w"> </span>.instanceUrl)<span class="w">
</span><span class="w">          </span>USER_NAME=$(echo<span class="w"> </span>$ORG_INFO<span class="w"> </span>|<span class="w"> </span>jq<span class="w"> </span>.username)<span class="w">
</span><span class="w">          </span>PASSWORD=$(echo<span class="w"> </span>$ORG_INFO<span class="w"> </span>|<span class="w"> </span>jq<span class="w"> </span>.password)<span class="w">
</span><span class="w">          </span>echo<span class="w"> </span>&#34;<span class="c">##[set-output name=login-url;]$(echo ${INSTANCE_URL}?un=${USER_NAME}\&amp;pw=${PASSWORD})</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;期限のないログインURLを表示&#39;</span><span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>echo<span class="w"> </span>${{<span class="w"> </span>steps.make-login-url.outputs.login-url<span class="w"> </span>}}<span class="w">
</span></code></pre></div><h2 id="おわりに">おわりに</h2>
<p>日毎にスクラッチ組織の作成数上限があるので、プルリクpushでトリガしたりする際は注意が必要ですが、Apexテストまでやってくれると結構便利になると思います。<br>
あとはこのワークフローをSlack連携させて拡張したりします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Auraコンポーネントの使い方</title>
      <link>https://mithy.fun/memos/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</link>
      <pubDate>Fri, 21 Feb 2020 16:10:26 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</guid>
      <description>Hoge.cmp: Viewテンプレートファイル、変数の定義やライフサイクルへの関数のハンドルもやる HogeController.js: cmpファイルでcから呼び出せる HogeHelper.js: HogeController.jsのdoInit: function(component, event, helper) { ... }のhelperに渡される。 Hoge.cmp レコードのデータは{! v.simpleRecord.Name }のような感じでアクセスできる actionで開いたモーダル内のコンポーネントだとv.simpleRecordとv.recordはundefinedだった コントローラーの</description>
      <content:encoded><p><code>Hoge.cmp</code>: Viewテンプレートファイル、変数の定義やライフサイクルへの関数のハンドルもやる
<code>HogeController.js</code>: <code>cmpファイル</code>で<code>c</code>から呼び出せる
<code>HogeHelper.js</code>: <code>HogeController.js</code>の<code>doInit: function(component, event, helper) { ... }</code>の<code>helper</code>に渡される。</p>
<h2 id="hogecmp">Hoge.cmp</h2>
<ul>
<li>レコードのデータは<code>{! v.simpleRecord.Name }</code>のような感じでアクセスできる
<ul>
<li>actionで開いたモーダル内のコンポーネントだと<code>v.simpleRecord</code>と<code>v.record</code>は<code>undefined</code>だった</li>
</ul>
</li>
<li>コントローラーのメソッドには<code>c</code>からアクセスできる。
<ul>
<li><code>&lt;aura:component controller=“DirectoryConversionController”&gt;</code>とすると<code>@AuraEnabled</code>のメソッドが<code>c</code>から呼べる。cは<code>Controller.js</code>の関数も含む。ハマった</li>
</ul>
</li>
</ul>
<h2 id="hogecontrollerjs--hogehelperjs">HogeController.js | HogeHelper.js</h2>
<p>コントローラーの関数は3つの引数がデフォルトで用意されている。<code>doInit: function(component, event, helper) { ... }</code>。<br>
<code>Hoge.cmp</code>の<code>{! v.simpleRecord }</code>といった変数には、<code>component.get('v.simpleRecord')</code>,<code>component.set('v.AnyAttr', 'any')</code>といった感じでアクセス可能。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.lightning.meta/lightning/js_helper.htm">コンポーネントのバンドル内の JavaScript コードの共有 | Lightning Aura Components Developer Guide (Lightning Aura コンポーネント開発者ガイド) | Salesforce Developers</a></li>
<li><code>$A</code>はデフォルトのネームスペース <a href="https://developer.salesforce.com/forums/?id=9060G0000005UinQAE">What is $A and $A.util in lightning ? - Salesforce Developer Community</a></li>
<li>レコードのデータは<code>{! v.simpleRecord.Name }</code>のような感じでアクセスできる
<ul>
<li>actionで開いたモーダル内のコンポーネントだと<code>v.simpleRecord</code>と<code>v.record</code>は<code>undefined</code>だった</li>
</ul>
</li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>Lightning Experience のリードと商談</title>
      <link>https://mithy.fun/memos/lightning-experience-%E3%81%AE%E3%83%AA%E3%83%BC%E3%83%89%E3%81%A8%E5%95%86%E8%AB%87/</link>
      <pubDate>Wed, 19 Feb 2020 17:28:59 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/lightning-experience-%E3%81%AE%E3%83%AA%E3%83%BC%E3%83%89%E3%81%A8%E5%95%86%E8%AB%87/</guid>
      <description>始める前 リードは、取引先、取引先責任者、商談に一方向に変換できる、それくらいの認識。 とくにどのレコードが具体的にどこで使われるのか、意味を持っているのかは理解していない。 メモ リードとは、潜在的な顧客として認識された人や会社。まだ顧客にはなっていないけど、なる可能性がある。 リードを使用すると、見込み客を区別することが簡単にできる。 リードレコードを作って、レコードページから取引の開始をクリックすると取</description>
      <content:encoded><h2 id="始める前">始める前</h2>
<p>リードは、取引先、取引先責任者、商談に一方向に変換できる、それくらいの認識。
とくにどのレコードが具体的にどこで使われるのか、意味を持っているのかは理解していない。</p>
<h2 id="メモ">メモ</h2>
<p>リードとは、潜在的な顧客として認識された人や会社。まだ顧客にはなっていないけど、なる可能性がある。<br>
リードを使用すると、見込み客を区別することが簡単にできる。</p>
<p>リードレコードを作って、レコードページから取引の開始をクリックすると取引先、取引責任者、商談へ変換できるモーダルが開く
<img src="/img/2020-02-19-18-09-22.png" alt="変換できるモーダル"></p>
<p>取引先責任者は商談に紐付けることができ、これでどの責任者とやり取りしているか明確になる。<br>
取引先は、取引先責任者が所属している組織のこと</p>
</content:encoded>
    </item>
    
    <item>
      <title>LWCの基本</title>
      <link>https://mithy.fun/memos/lwc%E3%81%AE%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Wed, 15 Jan 2020 16:58:28 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/lwc%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid>
      <description>はじめに LWCを使いそうなので基本をやる。所謂WebComponentsが中身になってるってことはどこかでみた。 トレイルがあったので、これをやる。 Lightning Web コンポーネントの作成 | Salesforce Trailhead Lightning Web コンポーネントの作成 LightningElementがLWCの実装っぽい。HTMLElementをラップしてそう 前から3つ終わったけど、大体開発環境とかの話だったな 所感 やり終わってしまったので所感を書く。雑メモは社スラッ</description>
      <content:encoded><h2 id="はじめに">はじめに</h2>
<p>LWCを使いそうなので基本をやる。所謂WebComponentsが中身になってるってことはどこかでみた。</p>
<p>トレイルがあったので、これをやる。
<a href="https://trailhead.salesforce.com/ja/content/learn/trails/build-lightning-web-components">Lightning Web コンポーネントの作成 | Salesforce Trailhead</a></p>
<h2 id="lightning-web-コンポーネントの作成">Lightning Web コンポーネントの作成</h2>
<ul>
<li><code>LightningElement</code>がLWCの実装っぽい。<code>HTMLElement</code>をラップしてそう</li>
</ul>
<p>前から3つ終わったけど、大体開発環境とかの話だったな</p>
<h2 id="所感">所感</h2>
<p>やり終わってしまったので所感を書く。雑メモは社スラックに投稿していたので気が向いたらこっちにまとめる。
Web標準に準拠して作られているので、最近のjavascriptフロントエンドライブラリを触っていれば、固有のAPIやアノテーションはあるけど、抵抗はすくないと感じた。モジュールをなぞってコードを読んだだけなので、やりたいことに向けてコードをいじったときに色々気づくかもしれない。
Salesforceのコンポーネントとしてしか利用出来ないのが惜しいなと、Webのどこにでも入れられるような感じに想像していたのでちょっとがっかり。
Salesforceのコンポーネントをモダンなjavascriptで書けるのは良い。出来ることはAuraには追いついていないらしいけど、API等の対応も進んでいるので今後はこっちが主流になっていくのかな。
トレイルに関しては、熊追跡アプリの作成のモジュールが参考になった。その他はSFDXだったり環境構築のことが大半をしめていた。</p>
<h2 id="さいごに">さいごに</h2>
<p>日本語でPG組織を作成するとTrailheadのステップで、ホームのAPI名が違って完了しないので注意</p>
</content:encoded>
    </item>
    
    <item>
      <title>Rustで始めるOpenGLをやっている</title>
      <link>https://mithy.fun/memos/rust%E3%81%A7%E5%A7%8B%E3%82%81%E3%82%8Bopengl/</link>
      <pubDate>Tue, 12 Nov 2019 15:23:06 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/rust%E3%81%A7%E5%A7%8B%E3%82%81%E3%82%8Bopengl/</guid>
      <description>これはなに [DL版] RustではじめるOpenGL - toyamaguchi - BOOTHをなぞった際のメモです。 目次を読む ライブラリごとに章が区切られている 環境準備 SDL OpenGL Dear ImGui 3Dオブジェクト テクスチャ ほとんど触れたことがないな、とりあえず上からやっていこう ソースコード→toyamaguchi/start_opengl_in_rust 環境 Rust Programming Languageに従ってRustをインストール versionは1.39だった cra</description>
      <content:encoded><h2 id="これはなに">これはなに</h2>
<p><a href="https://toyamaguchi.booth.pm/items/1557536">[DL版] RustではじめるOpenGL - toyamaguchi - BOOTH</a>をなぞった際のメモです。</p>
<h2 id="目次を読む">目次を読む</h2>
<p>ライブラリごとに章が区切られている</p>
<ol>
<li>環境準備</li>
<li>SDL</li>
<li>OpenGL</li>
<li>Dear ImGui</li>
<li>3Dオブジェクト</li>
<li>テクスチャ</li>
</ol>
<p>ほとんど触れたことがないな、とりあえず上からやっていこう
ソースコード→<a href="https://github.com/toyamaguchi/start_opengl_in_rust">toyamaguchi/start_opengl_in_rust</a></p>
<h2 id="環境">環境</h2>
<ul>
<li><a href="https://www.rust-lang.org/">Rust Programming Language</a>に従ってRustをインストール
<ul>
<li>versionは1.39だった</li>
<li>crateは<a href="https://crates.io/">crates.io: Rust Package Registry</a>で検索できる</li>
<li>VSCodeのrls、rustupのパスを通してやる必要があった。<code>&quot;rust-client.rustupPath&quot;: &quot;~/.cargo/bin/rustup&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="sdl">SDL</h2>
<p>SDLは、グラフィックやサウンドの機能を持ったマルチメディアライブラリ。
<a href="https://ja.wikipedia.org/wiki/SDL">SDL - Wikipedia</a><br>
これだけでも十分な機能を持つゲームを作成可能らしい</p>
<p>Rustからの利用は<code>crate「sdl2」</code>を利用する。<a href="https://github.com/Rust-SDL2/rust-sdl2">Rust-SDL2/rust-sdl2: SDL2 bindings for Rust</a><br>
<code>sd12</code>はC言語で書かれたライブラリを間接的に利用するラッパーのためSDLのインストールも必要。</p>
<p>SDLを使ってソフトに必要な構造を作ってOpenGLで描画をしていく。基本的な構造とは、ウィンドウやメインループ、イベント処理のような部分。</p>
<h3 id="準備">準備</h3>
<ul>
<li><a href="https://github.com/Rust-SDL2/rust-sdl2">Rust-SDL2/rust-sdl2: SDL2 bindings for Rust</a> の手順通りSDLをインストール</li>
<li><code>cargo.toml</code>に<code>sd12</code>を追加</li>
</ul>
<h3 id="作成">作成</h3>
<p><code>sdl2</code>のcrates.ioページを見る。</p>
<h2 id="opengl">OpenGL</h2>
<p>SDLのウィンドウに描画していく</p>
<h3 id="準備-1">準備</h3>
<p><code>cargo.toml</code>に<code>gl</code>(OpenGLのAPIを利用可能に),<code>cgmath</code>(CG用の数学関連機能),<code>c_str_macro</code>(C言語とコンパチビリティんのある文字列型を生成できる<code>c_str!</code>マクロが使えるようになる)を追加</p>
<h3 id="作成-1">作成</h3>
<p>HelloWorldは難しいらしいので三角形を描画する</p>
<p>シェーダーという言葉が出てきた</p>
<p>写経辛いのでコピペに切り替えていく</p>
<p>OpenGL3.1を使う、このバージョンは丁度APIが一新されたバージョンで、<code>Core</code>(新しいAPIのみ)と<code>Compability</code>(古いAPIもサポート)パッケージがある。今回は<code>Core</code></p>
<p>描画はシェーダと呼ばれる描画プログラムを通してデータを送る<br>
シェーダなしのサンプルコードは古い可能性があるので注意<br>
呼び名は<br>
あり: Programmable Pipeline<br>
なし: Fixed Function Pipeline<br>
などというらしい</p>
<p>シェーダは実行時にソースコードをコンパイルして使えるプログラムなのでこういった名称になってる</p>
<p>今回具体的にはVertexシェーダとFragmentシェーダを使った</p>
<h4 id="vertexシェーダ">Vertexシェーダ</h4>
<p>Vertexはそもそも頂点のこと、辺と辺を結ぶ点。3D空間内の頂点座標を画面上の座標にするまでに必要な計算をこのシェーダでやってる</p>
<p>描画したい頂点が、3D空間の中でどの位置にあるのかを表すモデル行列<br>
カメラの一を考慮したビュー行列<br>
カメラから見た3D空間をどのように画面に描画するかを表す射影行列<br>
3つの行列をかけ合わせて最終的な画面上の座標になる</p>
<h4 id="fragmentシェーダ">Fragmentシェーダ</h4>
<p>色を計算するシェーダ、Vertexシェーダから座標を得てテクスチャの中から適切な位置の色情報を計算して描画につかう</p>
<p>どちらもGLSLを使って実装する。<br>
GLSL(OpenGL Shading Language)はシェーダ専用の言語、GPUや前段のシェーダからの情報、扱える変数に独特のルールがある。<br>
GPUでの動作なので並列計算できる、画面上に多くの3Dオブジェクトを描画したいならシェーダを使って効果的に描画する必要がある。</p>
<p>GLSLのバージョンは3.3</p>
<p>VBO(Vertex Buffer Object)はCPUからGPUに情報を渡すための入れ物、頂点データだったり色情報だったり<br>
VAO(Vertex Array Object)はVBOをどのようなまとまりで使うのかを設定するもの</p>
<p>WebGLの話ものってそう</p>
<p>サンプルコードが動かない→動いた、sampleリポジトリのrscフォルダを追加すればよかっただけだった。章の最後に書いてあった。</p>
<pre><code class="language-log" data-lang="log">RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
     Running `target/debug/rust-opengl`
OK: init OpenGL: version=3.1
thread 'main' panicked at 'failed to open file: rsc/shader/shader.vs', src/shader.rs:28:33
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.37/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.37/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:76
   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt
             at src/libstd/sys_common/backtrace.rs:60
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1030
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1412
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:64
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:49
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:196
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:473
  11: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:380
  12: std::thread::local::fast::Key&lt;T&gt;::try_initialize
  13: rust_opengl::shader::Shader::new::{{closure}}
             at src/shader.rs:28
  14: core::result::Result&lt;T,E&gt;::unwrap_or_else
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/result.rs:818
  15: rust_opengl::shader::Shader::new
             at src/shader.rs:27
  16: rust_opengl::main
             at src/main.rs:52
  17: std::rt::lang_start::{{closure}}
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/rt.rs:64
  18: std::rt::lang_start_internal::{{closure}}
             at src/libstd/rt.rs:49
  19: std::panicking::try::do_call
             at src/libstd/panicking.rs:292
  20: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:80
  21: std::panicking::try
             at src/libstd/panicking.rs:271
  22: std::panic::catch_unwind
             at src/libstd/panic.rs:394
  23: std::rt::lang_start_internal
             at src/libstd/rt.rs:48
  24: std::rt::lang_start
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/rt.rs:64
  25: rust_opengl::main
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
</code></pre><p>できた。
<img src="/img/2019-11-12-18-08-05.png" alt=""></p>
<p>頂点情報はこういう感じで書いていた</p>
<div class="highlight"><pre class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="c1">// set buffer
</span><span class="c1"></span><span class="w">    </span><span class="cp">#[rustfmt::skip]</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">buffer_array</span>: <span class="p">[</span><span class="kt">f32</span><span class="p">;</span><span class="w"> </span><span class="n">BUF_LEN</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span><span class="w">        </span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="mf">0.0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="mf">0.0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="mf">0.0</span><span class="p">,</span><span class="w"> </span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="mf">0.0</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">];</span><span class="w">
</span></code></pre></div><h2 id="dear-imgui">Dear ImGui</h2>
<p><a href="https://github.com/ocornut/imgui">ocornut/imgui</a></p>
<p>OpenGLに様々なGUIを追加できるライブラリ</p>
<p>これを使ってSDL2のウィンドウに新たにウィンドウを追加する。</p>
<p>出た</p>
<p><img src="/img/2019-12-17-15-49-08.png" alt=""></p>
<p><img src="/img/2019-12-17-15-59-28.png" alt=""></p>
<h3 id="効果的な使い方">効果的な使い方</h3>
<p>パラメータの微調節を行えるように、ここの値をスライダーで調節できるようにすると良いらしい
FPSを表示も</p>
</content:encoded>
    </item>
    
    <item>
      <title>Visualforceの基礎</title>
      <link>https://mithy.fun/memos/visualforce%E3%81%AE%E5%9F%BA%E7%A4%8E/</link>
      <pubDate>Mon, 11 Nov 2019 15:50:31 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/visualforce%E3%81%AE%E5%9F%BA%E7%A4%8E/</guid>
      <description>Visualforceとは Lightning Platformでホストできるモバイル及びデスクトップアプリケーション用のUIフレームワーク Salesforceの組み込み機能の拡張、新しいアプリケーションの作成ができる 標準またはApexでビジネスロジックを記述する。 使用できる場所 ナビゲーションバーに追加 標準ページレイアウト内に表示 Lightningアプリケーションビルダーでコンポーネントとして追加する [Lightning Experie</description>
      <content:encoded><h2 id="visualforceとは">Visualforceとは</h2>
<ul>
<li>Lightning Platformでホストできるモバイル及びデスクトップアプリケーション用のUIフレームワーク</li>
<li>Salesforceの組み込み機能の拡張、新しいアプリケーションの作成ができる</li>
<li>標準またはApexでビジネスロジックを記述する。</li>
</ul>
<h2 id="使用できる場所">使用できる場所</h2>
<ul>
<li>ナビゲーションバーに追加</li>
<li>標準ページレイアウト内に表示</li>
<li>Lightningアプリケーションビルダーでコンポーネントとして追加する
<ul>
<li>[Lightning Experience、Lightning コミュニティ、およびモバイルアプリケーションで利用可能] を有効にする必要がある。</li>
</ul>
</li>
<li>オブジェクトページの標準ボタンやリンクを上書きして表示する</li>
<li>オブジェクトページにカスタムボタンやリンクを配置して表示する</li>
</ul>
<h2 id="ページの作成">ページの作成</h2>
<ul>
<li>APIを使用して作成変更できる</li>
<li>開発者コンソール
<ul>
<li>エディタがついてる。補完あり</li>
<li>LightningExperienseのページから実行でLightningExperienseでプレビュ  $A.get(&ldquo;e.force:navigateToURL&rdquo;).setParams({&ldquo;url&rdquo;: &ldquo;/apex/pageName&rdquo;}).fire();</li>
</ul>
</li>
<li>xmlベース</li>
</ul>
<h2 id="単純な変数と数式の使用">単純な変数と数式の使用</h2>
<ul>
<li>グローバル変数 ex. <code>$User</code> <a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_global.htm">グローバル変数 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
<li>構文 {! expression } を評価して出力してくれる
<ul>
<li>expressionないは大文字小文字区別なし</li>
<li>文字列連結は&amp;</li>
<li>メンバーアクセスは<code>.</code>(ドット)つなぎ</li>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_operators.html">式の演算子 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
</li>
<li>標準関数 ex. TODAY(), DAY()&hellip; <a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_functions.htm">関数 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
<h2 id="標準コントローラの使用">標準コントローラの使用</h2>
<ul>
<li>MVC</li>
<li>標準なアクションとデータアクセスを処理できる</li>
<li><code>&lt;apex standardController=&quot;Account&quot;&gt;</code>で有効化</li>
<li>getQueryでコントローラにパラメータを渡せる。ex. <code>/apex/pageName?id={ObjectID}</code></li>
</ul>
<h2 id="レコード項目テーブルの表示">レコード、項目、テーブルの表示</h2>
<ul>
<li><code>&lt;apex:detail /&gt;</code>等の一括出力コンポーネントがある</li>
<li><code>&lt;apex:outputField value=&quot;{! Account.Name }&quot;/&gt;</code>のようなUIコンポーネントもある</li>
<li><code>&lt;!--&gt;</code>はテーブルUI</li>
<li><code>&lt;apex:relatedList list=&quot;Contacts&quot;&gt;</code>はリスト</li>
</ul>
<h2 id="フォームを使用したデータの入力">フォームを使用したデータの入力</h2>
<ul>
<li><code>&lt;apex:form&gt;</code>のデータは<code>&lt;apex:page&gt;</code>で指定されたコントローラーを元にする</li>
<li>プラットフォームのスタイルを使用する要素としない要素がある
<ul>
<li>する
<ul>
<li><code>&lt;apex:form&gt;</code>を使用している場合</li>
<li><code>&lt;apex:pageBlock&gt;</code>及び<code>&lt;apex;pageBlockSection&gt;</code>内で入力要素を使用する場合</li>
</ul>
</li>
</ul>
</li>
<li><code>&lt;apex:commandButton /&gt;</code>でボタンが作成できる。要素を足すことで色々指定する。<code>action=&quot;{! save }&quot;</code>,<code>value=&quot;Save&quot;</code>等々</li>
</ul>
<h2 id="標準リストコントローラの使用">標準リストコントローラの使用</h2>
<ul>
<li>クエリ可能</li>
<li>コレクション変数でレコードの使用、絞り込み、ページネーションなども用意されている</li>
<li>一度に多数のレコードを操作することを目的としている</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="c">&lt;!-- recordSetVarで作業するオブジェクトを設定 --&gt;</span>
<span class="nt">&lt;apex:page</span> <span class="na">standardController=</span><span class="s">&#34;Contact&#34;</span> <span class="na">recordSetVar=</span><span class="s">&#34;contacts&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;apex:pageBlock</span> <span class="na">title=</span><span class="s">&#34;Contacts List&#34;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- Contacts List --&gt;</span>
        <span class="c">&lt;!-- テーブルのvalueにrecordSetVarで設定されたオブジェクトを渡す --&gt;</span>
        <span class="nt">&lt;apex:pageBlockTable</span> <span class="na">value=</span><span class="s">&#34;{! contacts }&#34;</span> <span class="na">var=</span><span class="s">&#34;ct&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;apex:column</span> <span class="na">value=</span><span class="s">&#34;{! ct.FirstName }&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;apex:column</span> <span class="na">value=</span><span class="s">&#34;{! ct.LastName }&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;apex:column</span> <span class="na">value=</span><span class="s">&#34;{! ct.Email }&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;apex:column</span> <span class="na">value=</span><span class="s">&#34;{! ct.Account.Name }&#34;</span><span class="nt">/&gt;</span>
        <span class="err">&lt;</span>/!--&gt;
    <span class="nt">&lt;/apex:pageBlock&gt;</span>
<span class="nt">&lt;/apex:page&gt;</span>
</code></pre></div><ul>
<li><code>&lt;apex:datalist&gt;</code>, <code>&lt;apex:repeat&gt;</code>等でリストを作れる</li>
</ul>
<h2 id="リンク">リンク</h2>
<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.pages.meta/pages/pages_compref.htm">標準のコンポーネントの参照 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>Vueでモノレポがしたかった</title>
      <link>https://mithy.fun/memos/vue%E3%81%A7%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E3%81%8C%E3%81%97%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F/</link>
      <pubDate>Tue, 05 Nov 2019 15:31:32 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/vue%E3%81%A7%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E3%81%8C%E3%81%97%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F/</guid>
      <description>これはなに Vueのプロジェクトに管理画面用アプリケーションを追加した際にやったことのメモ 事前知識 @vue/cli, @vue/cli-serviceについてあまり知らなかったので、今回よく使っていたコマンドをメモ vue-cli-service build - vue createで作成されたプロジェクトのnpm scriptsにnpm run buildとして登録されていた。vue.config.jsにビルド設定がある。 vue inspect - vue.config.jsを考慮した実際にビル</description>
      <content:encoded><h2 id="これはなに">これはなに</h2>
<p>Vueのプロジェクトに管理画面用アプリケーションを追加した際にやったことのメモ</p>
<h2 id="事前知識">事前知識</h2>
<p><code>@vue/cli</code>, <code>@vue/cli-service</code>についてあまり知らなかったので、今回よく使っていたコマンドをメモ</p>
<ul>
<li><code>vue-cli-service build</code> - <code>vue create</code>で作成されたプロジェクトのnpm scriptsに<code>npm run build</code>として登録されていた。<code>vue.config.js</code>にビルド設定がある。</li>
<li><code>vue inspect</code> - <code>vue.config.js</code>を考慮した実際にビルドの際に使われる<code>webpack.config.js</code>を出力してくれる</li>
</ul>
<h2 id="始める前のプロジェクト構成等">始める前のプロジェクト構成等</h2>
<p><code>vue cli</code>で生成したままのプロジェクト構成でした。
必要そうなものを抜き出すとこんな感じ</p>
<pre><code class="language-tree" data-lang="tree">├── public
├── src
├── tests
├── package.json
└── vue.config.js
</code></pre><p>ちなみにビルドは<code>vue-cli-service build</code>で行っていた。</p>
<h2 id="やりたいこと">やりたいこと</h2>
<ul>
<li>出力をdist/app, dist/adminのように複数ディレクトリに分ける。</li>
<li>ビルド、ビルド設定を分ける</li>
<li>lint設定は共有する</li>
</ul>
<h2 id="変更後のディレクトリ構成とビルドコンフィグ">変更後のディレクトリ構成とビルドコンフィグ</h2>
<p>アプリと管理画面のソースを分けるために以下のようにディレクトリ構成を変更した。</p>
<pre><code class="language-tree" data-lang="tree">.
├── projects
│    ├── admin
│    │   ├── public
│    │   ├── src
│    │   ├── package.json
│    │   └── vue.config.js
│    └── app
│        ├── public
│        ├── src
│        ├── package.json
│        └── vue.config.js
└── package.json
</code></pre><p><code>projects/app</code>には以前から存在していたアプリケーションのコードとそれら周辺のファイルを、<code>projects/admin</code>には<code>vue create admin</code>したものが入っている。<br>
上記には書いていないが<code>tsconfig.json</code>や<code>.eslintrc</code>はルートと各プロジェクトに配置してあり、ルートのものを各プロジェクトが extends している。<br>
あとは<code>vue.config.js</code>に<code>outputDir</code>を追加して、出力フォルダを揃えたくらいで、ほぼ初期設定。</p>
<h2 id="こうなった理由">こうなった理由</h2>
<p>やり始めた際は<code>vue.config.js</code>の<code>pages</code>でマルチエントリにして終わりと思っていたけど、そうは行かなかったのは以下。</p>
<ul>
<li>出力先が同ディレクトリ、プロジェクト毎に一つ深くしたかったが、<code>vue.config.js</code>から制御しきれなかった。</li>
<li>コンフィグ系が共有
<ul>
<li><code>tsconfig.json</code>、<code>vue.config.js</code>等々。必要のない設定を読み込むことが双方のプロジェクトに発生する。</li>
</ul>
</li>
<li>ビルドが同時のみ
<ul>
<li>現時点の<code>vue-cli-service(ver 3.12.1)</code>では<code>vue.config.js</code>の<code>pages</code>はエントリポイントを増やすことだけを行って、個別に<code>webpack.config.js</code>相当のものを作るわけじゃなかった。</li>
</ul>
</li>
</ul>
<p>ということで、<code>projects</code>ディレクトリを作ってそこで<code>vue create admin</code>を叩いた感じになった。</p>
<h2 id="この構成で思うこと">この構成で思うこと</h2>
<ul>
<li>package.jsonめっちゃある。</li>
<li>node_modulesもめっちゃある、中身重複しまくりそう。</li>
<li>vueのモノレポ環境はまだ成長段階な感じがする。<code>VueLanguageServer</code>も複数プロジェクトには対応していなかった。</li>
</ul>
<h2 id="これからどうするか">これからどうするか</h2>
<ul>
<li>Webpackを学ぶ
<ul>
<li>強くなればもっとスリムにできそう</li>
<li>コントリビュートへも繋がりそう</li>
</ul>
</li>
<li>VSCodeの拡張機能、エディタの技術を学ぶ
<ul>
<li>LanguageServerやLinterの最適化に苦労したので・・・</li>
</ul>
</li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>TRAILHEADに入門した</title>
      <link>https://mithy.fun/memos/trailhead%E3%81%AB%E5%85%A5%E9%96%80%E3%81%97%E3%81%9F/</link>
      <pubDate>Thu, 31 Oct 2019 13:07:17 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/trailhead%E3%81%AB%E5%85%A5%E9%96%80%E3%81%97%E3%81%9F/</guid>
      <description>TRAILHEADってなに Trailhead | 楽しく学ぶ方法 Salesforceが運営している学習サイト、コンテンツは主にSalesforce関連で、経営者、営業、開発向けが用意されている。 Salesforce関連以外もBlockchainや、IOSアプリケーション開発のコンテンツもある。 やり始める前の認識 無数にあるPaaSの一つ SaaSも提供してる セールス・顧客系に強い アプリやコンポーネントをリリースできる 以下</description>
      <content:encoded><h2 id="trailheadってなに">TRAILHEADってなに</h2>
<p><a href="https://trailhead.salesforce.com/ja/home"><em>Trailhead | 楽しく学ぶ方法</em></a></p>
<p>Salesforceが運営している学習サイト、コンテンツは主にSalesforce関連で、経営者、営業、開発向けが用意されている。
Salesforce関連以外もBlockchainや、IOSアプリケーション開発のコンテンツもある。</p>
<h2 id="やり始める前の認識">やり始める前の認識</h2>
<ul>
<li>無数にあるPaaSの一つ
<ul>
<li>SaaSも提供してる</li>
</ul>
</li>
<li>セールス・顧客系に強い</li>
<li>アプリやコンポーネントをリリースできる</li>
</ul>
<p>以下、とりあえず<a href="https://trailhead.salesforce.com/ja/users/00550000007HqDdAAK/trailmixes/start-develop">Trailmix by ルーキー会 Salesforce DeveloperGroup</a>を順にメモする</p>
<h2 id="salesforceテクノロジモデル">Salesforceテクノロジモデル</h2>
<ul>
<li>信頼の基準、最も信頼されるために行ってきた投資
<ul>
<li><a href="https://trust.salesforce.com/ja/">Salesforce Trust</a> でシステムの状況や、セキュリティ対策が見れる</li>
</ul>
</li>
<li>個別の企業以上のセキュリティを提供する方法
<ul>
<li>マルチテナンシー型で提供する
<ul>
<li>利益となるイノベーションに注力できる</li>
<li>高級マンションの建物を想像して
<ul>
<li>ドアマン、備え付き洗濯機&hellip;</li>
<li>自分専用のスペース</li>
<li>インフラ系は大家が管理</li>
</ul>
</li>
<li>Salesforceは大家の役割</li>
<li>小さい企業から大きい企業まで同じコードベースを利用することで利益を得ることができる</li>
</ul>
</li>
</ul>
</li>
<li>規則の厳しい業種がSalesforceに最も重要なデータを委ねる理由
<ul>
<li>上記の通り</li>
</ul>
</li>
<li>メタデータ
<ul>
<li>データのためのデータ？</li>
<li>カスタムタグ、カスタム項目、自動アラート、標準レポート、Chatte等、全てがメタデータ</li>
<li>カスタム機能と標準機能のすべてを含むSalesforceインスタンスの構造</li>
<li>カスタマイズは特別なメタデータレイヤに分離している
<ul>
<li>バックグラウンドの更新やプラットフォームの更新・改善を行うことができる</li>
</ul>
</li>
</ul>
</li>
<li>アプリケーション開発
<ul>
<li>カスタマイズや変更が可能なインフラを提供することが使命</li>
<li>メタデータ駆動型で速度が出る
<ul>
<li>ケーキにクリームを塗るように</li>
</ul>
</li>
<li>ポイント&amp;クリックかカスタムコードで開発</li>
</ul>
</li>
</ul>
<h2 id="salesforce-platformの使用開始">Salesforce Platformの使用開始</h2>
<ul>
<li>標準機能
<ul>
<li>リードと商談</li>
<li>顧客サポートのためのケースとコミュニティ</li>
<li>モバイルアプリ</li>
<li>会社とつながるためのChatterとコミュニティ</li>
<li>カスタマージャーニーを管理するためのMarketingCloud</li>
<li>あまり良くわかってない</li>
</ul>
</li>
<li>用語
<ul>
<li>アプリケーション
<ul>
<li>ビジネスプロセスをサポートするオブジェクト、項目、その他の機能のセット</li>
</ul>
</li>
<li>オブジェクト
<ul>
<li>特定の種類の情報が保存される、DBのテーブル</li>
<li>標準とカスタムがある</li>
</ul>
</li>
<li>データベース
<ul>
<li>巨大なスプレッドシートを想像</li>
</ul>
</li>
<li>レコード
<ul>
<li>オブジェクトデータベーステーブルの行</li>
</ul>
</li>
<li>項目
<ul>
<li>オブジェクトデータベーステーブルの列</li>
</ul>
</li>
<li>組織
<ul>
<li>Salesforceの特定のインスタンス</li>
</ul>
</li>
</ul>
</li>
<li>実際にポイント&amp;クリックで作ってみた
<ul>
<li>データベースへカスタムフィールドを追加できた</li>
<li>データベーステーブルのレコード詳細画面で追加されたフィールドの入力欄が表示された</li>
</ul>
</li>
<li>Salesforce アーキテクチャ
<ul>
<li>何層にも重なってる</li>
<li>マルチテナンシー</li>
</ul>
</li>
<li>設定
<ul>
<li>上部ギアメニューから開く</li>
<li>組織情報、ユーザ、プロファイル、設定変更履歴の参照、ログイン履歴等見れる</li>
</ul>
</li>
<li>AppExchangeの戦略と、アプリケーションのインストール
<ul>
<li>使用予定の部門を特定</li>
<li>要望を最大限に満たすものを調査
<ul>
<li>ビジネスの問題</li>
<li>最も苦労している点</li>
<li>何人のユーザが必要としているか</li>
<li>予算</li>
<li>期限</li>
</ul>
</li>
<li>そうすることで最適なアプリケーションを見つけやすくなる</li>
<li>テスト環境にダウンロード、インストールして、競合がないか確認する</li>
<li>候補が複数ある場合はテストした内容を、使用できない機能や不要な機能がないか検討。関係者にフィードバックを依頼</li>
<li>本番にインストール、トレーニング、ドキュメントの提供</li>
</ul>
</li>
</ul>
<h2 id="データモデリング">データモデリング</h2>
<ul>
<li>Salesプラットフォームでオブジェクトを使用するメリット
<ul>
<li>オブジェクトはデータベーステーブルのこと、テーブルの列が項目、行がレコードとみなされる</li>
<li>データモデルはオブジェクトと項目のコレクション</li>
<li>標準オブジェクト
<ul>
<li>Salesforceに含まれるオブジェクト</li>
<li>取引先、取引先責任者、リード、商談などの一般的なビジネスオブジェクト</li>
</ul>
</li>
<li>カスタムオブジェクト
<ul>
<li>会社や業種に固有の情報を保存するために作成するオブジェクト</li>
<li>プラットフォームによっては作成にフックして、UIのページレイアウトが作成される</li>
</ul>
</li>
<li>設定の新規からオブジェクト作成と、オブジェクトの項目とリレーションの新規ボタンからフィールド追加を行った</li>
<li>スキーマビルダーというMySQLで言うER図のようなツールもある</li>
</ul>
</li>
</ul>
<h2 id="プラットフォーム開発の基礎">プラットフォーム開発の基礎</h2>
<ul>
<li>Dream House Realty っていうアプリを作っていってみる</li>
<li>Apex</li>
<li>SOQL Salesforce Object Query Language</li>
<li>Apex上のSOQLは実行されてレコードに変換される</li>
<li>Apexで書いたControllerをVisualforceページから利用できる</li>
<li>Herokuがでてきた</li>
<li>RESTやSOAP APIも使える</li>
<li>Heroku ConnectでSalesforceのオブジェクトをHeroku Postgreに変換できる</li>
</ul>
<h2 id="apexの基礎とデータベース">Apexの基礎とデータベース</h2>
<ul>
<li>小文字と大文字が区別されない</li>
<li>開発者コンソールのDebug &gt; 匿名実行みたいなやつが便利</li>
<li>sObjectは汎用Type、標準オブジェクト、カスタムオブジェクトのレコードに使用できる</li>
<li>insert, upsert, mergeといった便利なデータ更新用DMLステートメントがある</li>
<li>Database配下にDMLステートメントと同じ物があって、それの第二引数にfalseを渡すと例外の代わりにResultオブジェクトを返すことができる</li>
<li>SOSL 組織全体のレコードから特定の情報を検索、部分一致検索、どのオブジェクトのフィールドを対象とするか選べる</li>
</ul>
<h2 id="apexトリガ">Apexトリガ</h2>
<ul>
<li>データベースのbeforeSaveとかのこと</li>
<li><code>trigger SoqlTriggerBulk on Account(after update) {</code> で定義する。このトリガ内で<code>Trigger</code>を呼び出せて、そこに色々情報が詰まってる</li>
<li>レコードごとに処理すると思いし、制限に引っかかるからSOQLとかDMLとか駆使してやろうね</li>
</ul>
<h2 id="apexテスト">Apexテスト</h2>
<ul>
<li><code>@isTest</code>を使うとパラメータを指定できる。知らなかった。</li>
<li><code>Test &gt; RunAll</code>でやるとコードカバレッジが出せる</li>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.apexcode.meta/apexcode/apex_testing_tools_start_stop_test.htm">Limits、startTest、および stopTest の使用 | Apex 開発者ガイド | Salesforce Developers</a></li>
</ul>
<h2 id="visualforceの基礎">Visualforceの基礎</h2>
<ul>
<li>Lightning Platformでホストできるモバイル及びデスクトップアプリケーション用のUIフレームワーク</li>
<li>Salesforceの組み込み機能の拡張、新しいアプリケーションの作成ができる</li>
<li>標準またはApexでビジネスロジックを記述する。</li>
</ul>
<h3 id="使用できる場所">使用できる場所</h3>
<ul>
<li>ナビゲーションバーに追加</li>
<li>標準ページレイアウト内に表示</li>
<li>Lightningアプリケーションビルダーでコンポーネントとして追加する
<ul>
<li>[Lightning Experience、Lightning コミュニティ、およびモバイルアプリケーションで利用可能] を有効にする必要がある。</li>
</ul>
</li>
<li>オブジェクトページの標準ボタンやリンクを上書きして表示する</li>
<li>オブジェクトページにカスタムボタンやリンクを配置して表示する</li>
</ul>
<h3 id="ページの作成">ページの作成</h3>
<ul>
<li>APIを使用して作成変更できる</li>
<li>開発者コンソール
<ul>
<li>エディタがついてる。補完あり</li>
<li>LightningExperienseのページから実行でLightningExperienseでプレビュ  $A.get(&ldquo;e.force:navigateToURL&rdquo;).setParams({&ldquo;url&rdquo;: &ldquo;/apex/pageName&rdquo;}).fire();</li>
</ul>
</li>
<li>xmlベース</li>
</ul>
<h3 id="単純な変数と数式の使用">単純な変数と数式の使用</h3>
<ul>
<li>グローバル変数 ex. $<a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_global.htm">User グローバル変数 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
<li>構文 {! expression } を評価して出力してくれる
<ul>
<li>expressionないは大文字小文字区別なし</li>
<li>文字列連結は&amp;</li>
<li>式の演算子 | <a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_operators.htm">Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
</li>
<li>標準関数 ex. TODAY(), DAY()&hellip; <a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_functions.htm">関数 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
<h3 id="標準コントローラの使用">標準コントローラの使用</h3>
<ul>
<li>MVC</li>
<li>標準なアクションとデータアクセスを処理できる</li>
<li><code>&lt;apex standardController=&quot;Account&quot;&gt;</code>で有効化</li>
<li>getQueryでコントローラにパラメータを渡せる。ex. /apex/pageName?id={ObjectID}</li>
</ul>
<h3 id="レコード項目テーブルの表示">レコード、項目、テーブルの表示</h3>
<ul>
<li>&lt;apex:detail /&gt;等の一括出力コンポーネントがある</li>
<li>&lt;apex:outputField value=&rdquo;{! Account.Name }&quot;/&gt;のようなUIコンポーネントもある</li>
<li><a href="apex:pageBlockTable">apex:pageBlockTable</a>はテーブルUI</li>
<li>&lt;apex:relatedList list=&quot;Contacts&quot;&gt;はリスト</li>
</ul>
<h3 id="フォームを使用したデータの入力">フォームを使用したデータの入力</h3>
<ul>
<li><a href="apex:form">apex:form</a>のデータは<a href="apex:page">apex:page</a>で指定されたコントローラーを元にする</li>
<li>プラットフォームのスタイルを使用する要素としない要素がある
<ul>
<li>する
<ul>
<li><a href="apex:form">apex:form</a>を使用している場合</li>
<li><a href="apex:pageBlock">apex:pageBlock</a>及び&lt;apex;pageBlockSection&gt;内で入力要素を使用する場合</li>
</ul>
</li>
</ul>
</li>
<li>&lt;apex:commandButton /&gt;でボタンが作成できる。要素を足すことで色々指定する。action=&rdquo;{! save }&quot;,value=&quot;Save&quot;等々</li>
</ul>
<h3 id="レコードのリスト">レコードのリスト</h3>
<ul>
<li>
<p>htmlの要素もそのまま書ける</p>
</li>
<li>
<p><code>&lt;apex: repeat value=&quot;{! accounts }&quot; var=&quot;a&quot;&gt;</code>とするとなかで<code>{!a.id}</code>とかできる。</p>
</li>
<li>
<p><code>{! URLFOR($Resource.vfimagetest, 'cats/kitten1.jpg') }</code>とかのURLresolve便利系がある</p>
</li>
<li>
<p>静的リソースは設定の静的リソースから追加できる</p>
</li>
</ul>
<h2 id="開発者コンソールの基礎">開発者コンソールの基礎</h2>
<ul>
<li>ワークスペース分けできるらしい</li>
<li>Logパネル、Save Perspectiveで配置を保存できる</li>
<li></li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>Macのセットアップでやること</title>
      <link>https://mithy.fun/memos/mac%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8/</link>
      <pubDate>Tue, 29 Oct 2019 17:44:59 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/mac%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8/</guid>
      <description>これはなに 新しいMacを手に入れたり、初期化した際にすることのメモ 最初にする事 ソフトウェア・アップデート App store magnetをインストール すべてをアップデート システム環境設定系 ネットワーク 適宜Wi-Fi、優先でつなぐ Dock 位置を左に 自動的に表示/非表示にチェック 不要なアプリをDockから除いておく トラックパッド スクロールの方向: ナチュラル以外のすべてのチェックボックスをオン 軌跡の速さをやや速めに設定 デスク</description>
      <content:encoded><h2 id="これはなに">これはなに</h2>
<p>新しいMacを手に入れたり、初期化した際にすることのメモ</p>
<h2 id="最初にする事">最初にする事</h2>
<ul>
<li>ソフトウェア・アップデート</li>
<li>App store
<ul>
<li>magnetをインストール</li>
<li>すべてをアップデート</li>
</ul>
</li>
</ul>
<h2 id="システム環境設定系">システム環境設定系</h2>
<h3 id="ネットワーク">ネットワーク</h3>
<ul>
<li>適宜Wi-Fi、優先でつなぐ</li>
</ul>
<h3 id="dock">Dock</h3>
<ul>
<li>位置を左に</li>
<li>自動的に表示/非表示にチェック</li>
<li>不要なアプリをDockから除いておく</li>
</ul>
<h3 id="トラックパッド">トラックパッド</h3>
<ul>
<li><code>スクロールの方向: ナチュラル</code>以外のすべてのチェックボックスをオン</li>
<li>軌跡の速さをやや速めに設定</li>
</ul>
<h3 id="デスクトップとスクリーンセーバ">デスクトップとスクリーンセーバ</h3>
<ul>
<li>ホットコーナーに画面ロックを追加</li>
</ul>
<h3 id="ディスプレイ">ディスプレイ</h3>
<ul>
<li>Night Shift
<ul>
<li>全日かかるように開始終了時刻設定</li>
<li>今日の終了設定時刻までオンするをチェック</li>
</ul>
</li>
</ul>
<h3 id="キーボード">キーボード</h3>
<p>※ GoogleIMEのインストールと、外部キーボードの接続を終えてから</p>
<ul>
<li>外部キーボード設定</li>
<li>入力ソースをGoogleIMEのひらがなと英数のみにする</li>
<li>ショートカット &gt; キーボード &gt; 次のウィンドウを捜査対象にするキーを<code>⌥ + tab</code>に変更する</li>
</ul>
<h3 id="mission-control">Mission Control</h3>
<ul>
<li>キーボードとマウスのショートカットのMission Controlにマウスボタン3を割り当てる</li>
</ul>
<h3 id="サウンド">サウンド</h3>
<ul>
<li>メニューバーに音量を表示をチェック</li>
</ul>
<h3 id="icloudインターネットアカウント">iCloud・インターネットアカウント</h3>
<ul>
<li>適宜ログイン</li>
</ul>
<h3 id="日付と時刻">日付と時刻</h3>
<ul>
<li>日付を表示にチェック</li>
</ul>
<h2 id="アプリケーション">アプリケーション</h2>
<h3 id="最初にすること">最初にすること</h3>
<ul>
<li><code>xcode-select --install</code>でxcodeを更新する</li>
<li>dotfilesをクローンする。<code>git clone https://github.com/MamoruMachida/dotfiles $HOME/dotfiles</code></li>
<li>設定スクリプトを実行する。<code>sh ~/dotfiles/init_osx.sh</code>
<ul>
<li>スクリプトは完璧ではないので適宜確認しつつ</li>
</ul>
</li>
<li>再起動</li>
</ul>
<h3 id="言語系env">言語系〇〇env</h3>
<ul>
<li>何かしらコマンド利用がある<code>nodenv</code>は必須
<ul>
<li><code>nodenv install --list</code> で適宜良さそうなバージョンを決める</li>
<li><code>nodenv install {version} &amp;&amp; nodenv global {version}</code></li>
</ul>
</li>
</ul>
<h3 id="iterm">iTerm</h3>
<ul>
<li>設定ファイルを読み込む
<ul>
<li>General &gt; Preferences の設定ファイルを置くフォルダを<code>~/dotfiles</code>にして再起動</li>
</ul>
</li>
<li>Hotkey Window を有効にする
<ul>
<li>Keys &gt; Hotkey からホットキーウィンドを作成する</li>
</ul>
</li>
</ul>
<h3 id="入力ソース">入力ソース</h3>
<ul>
<li>IME等インストールが済んでいるので、システム環境設定のキーボード &gt; 入力ソースを変更する</li>
<li>vim用のカスタムキー設定をする
<ul>
<li><img src="/img/2019-10-29-22-09-59.png" alt="GoogleIMEのカスタムキー設定"></li>
</ul>
</li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>ML Study Jams Vol.3</title>
      <link>https://mithy.fun/memos/launching_into_machine_learning_%E5%8F%97%E8%AC%9B%E3%83%AD%E3%82%B0/</link>
      <pubDate>Tue, 27 Aug 2019 21:51:23 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/launching_into_machine_learning_%E5%8F%97%E8%AC%9B%E3%83%AD%E3%82%B0/</guid>
      <description>Launching into Machine Learning MLの開始について このコースは、機械学習の用語や、普及の歴史、モデル作成のためのコードや知識を身につけます コースには最適化モジュールがあり、学習問題が用意位されている。最急降下法を使います。 実践的なMLについて 歴史を振り返って実践のときに参考にできるようします グーグルが全プロジェクトに機械学習を取り入れる取り組みについて紹介します 教師あり学習 教師あり学習 モデルになにを学習させるか これまで発</description>
      <content:encoded><h1 id="launching-into-machine-learning">Launching into Machine Learning</h1>
<h2 id="mlの開始について">MLの開始について</h2>
<ul>
<li>このコースは、機械学習の用語や、普及の歴史、モデル作成のためのコードや知識を身につけます</li>
<li>コースには最適化モジュールがあり、学習問題が用意位されている。最急降下法を使います。</li>
</ul>
<h2 id="実践的なmlについて">実践的なMLについて</h2>
<ul>
<li>歴史を振り返って実践のときに参考にできるようします</li>
<li>グーグルが全プロジェクトに機械学習を取り入れる取り組みについて紹介します</li>
</ul>
<h2 id="教師あり学習">教師あり学習</h2>
<h3 id="教師あり学習-1">教師あり学習</h3>
<ul>
<li>モデルになにを学習させるか</li>
<li>これまで発達した理由を理解します</li>
<li>教師なし学習は発見するもの</li>
<li>教師あり学習はラベルの特徴でプロットされている</li>
<li>表データの行がデータとして、ラベル、連続値、分類値のカラムが存在し、ラベルは予測対象、連続値は回帰モデル、分類値は分類モデルになる
<ul>
<li>２つの分類値の場合バイナリモデルとかともいう</li>
</ul>
</li>
<li>分類モデルでも、その件数を予測したりする場合は回帰でできる</li>
</ul>
<h3 id="回帰と分類">回帰と分類</h3>
<p><img src="/img/2019-08-27-22-24-17.png" alt="レストランチップ 男女の分布"></p>
<ul>
<li>線形だとひどい分類予測になってしまいそう</li>
<li>非線形の方が、分類には適してそう</li>
</ul>
<h2 id="mlの歴史">MLの歴史</h2>
<h3 id="機械学習小史-線形回帰">機械学習小史: 線形回帰</h3>
<ul>
<li>線形回帰とかNWとか機械学習の歴史</li>
<li>線形回帰は惑星の動きやえんどう豆のさやに対する実の大きさを予測するために使われていた</li>
<li>線形回帰</li>
</ul>
<h3 id="機械学習小史-パーセプトロン">機械学習小史: パーセプトロン</h3>
<ul>
<li>1940年代にフランク ローゼンブラットが 人間の脳のニューロンの計算モデルとして パーセプトロンを考案し 簡単な機能の学習方法を示した</li>
<li>何度か壁にあたって忘れ去られたりもしてる</li>
</ul>
<h3 id="機械学習小史-ニューラルネットワーク">機械学習小史: ニューラルネットワーク</h3>
<ul>
<li>パーセプトロンを複数個つなげたような形の学習モデル</li>
</ul>
<h3 id="機械学習小史-決定ツリー">機械学習小史: 決定ツリー</h3>
<ul>
<li>ID3やC4.5</li>
<li>貪欲アルゴリズム</li>
<li>DNNでは実際の各層が結びついている</li>
<li>データの入れ物を決めてみよう</li>
<li>yes/noで振り分けていく</li>
<li>バイナリ分類器のようなもの</li>
<li>ツリーを再帰的に作るのは、NWの線形分類器ノードの層に似てる</li>
<li>実際にツリーの質問は入ってきたデータに対して一般化しておきたい</li>
</ul>
<h3 id="機械学習小史-カーネル-メソッド">機械学習小史: カーネル メソッド</h3>
<ul>
<li>SVMを含むジャンル</li>
<li>SVMはマージンをヒンジ関数を使って最大化する</li>
<li>次元が多い場合や 予測変数による 応答の予測精度が非常に高い場合 SVMは優れた効果を発揮します</li>
</ul>
<h3 id="機械学習小史-ランダム-フォレスト">機械学習小史: ランダム フォレスト</h3>
<ul>
<li>マシンの性能が上がると様々なモデルを組み合わせるようになった　アンサンブル法</li>
<li>ランダムフォレストはアンサンブル法の一つ</li>
</ul>
<h3 id="機械学習小史-最新のニューラル-ネットワーク">機械学習小史: 最新のニューラル ネットワーク</h3>
<ul>
<li>DNN</li>
<li>取り掛かるときに特に大事なこと
<ul>
<li>データ量</li>
<li>実験</li>
<li>一般化</li>
</ul>
</li>
</ul>
<h4 id="ゲレンデの混雑率予想の回答">ゲレンデの混雑率予想の回答</h4>
<p>混雑レベルを予測するには、ゲレンデを滑っている人数を予測できれば良い。</p>
<p>分かっていることは、リフト券を購入した利用客のレベルと、過去の積雪量(誤訳？前のビデオはそれまでの積雪量)。</p>
<p>各利用客レベルとそれまでの積雪量を用いて、ゲレンデに滞在している確率を求める回帰モデルを作成する。</p>
<p>上記モデルに、レベルと、刻々と変化しているそれまでの積雪量を与えて、ゲレンデに滞在している確率を求め、各利用客レベルごとのリフト券購入数と掛け合わせれば、ゲレンデを滑っている人数を予測できそう。</p>
<h2 id="最適化について">最適化について</h2>
<h3 id="機械学習モデルの定義">機械学習モデルの定義</h3>
<ul>
<li>モデルはパラメータとハイパーパラメータを使った数学的関数</li>
<li>特徴量と呼ばれる独立変数が変化するとラベルと呼ばれる従属変数も同量だけ変化する</li>
<li>2次元領域の直線　y = mx + b</li>
<li>この考え方は任意の高次元まで拡張できる</li>
</ul>
<h3 id="出生率データセットの概要">出生率データセットの概要</h3>
<ul>
<li>赤ちゃんが生まれた際に治療が必要になるか予測する必要性</li>
<li>特徴量としての候補
<ul>
<li>赤ちゃんの体重</li>
<li>出生時間</li>
<li>母親の年齢</li>
</ul>
</li>
<li>うち赤ちゃんの体重と母親の年齢は観測可能なので特徴量として使用できる</li>
<li>体重は連続値</li>
<li>分布図に線形の先を引いてみてもいまいちに見える</li>
</ul>
<h3 id="損失関数の概要">損失関数の概要</h3>
<ul>
<li>モデルの最適なハイパーパラメタを求めるには</li>
<li>損失関数を使う</li>
<li>平均二乗誤差</li>
<li>クラス分類の場合は交差エントロピー損失を計算する</li>
</ul>
<h3 id="勾配降下法">勾配降下法</h3>
<ul>
<li>損失関数の凹凸表面をどのようにして最小値に下っていくのか
<ul>
<li>等高線のようなもの</li>
</ul>
</li>
<li>学習率次第で遅くなったり、最小値にたどり着けなかったりする</li>
<li>進む方向は、一番傾斜の深い方向</li>
</ul>
<h3 id="損失関数のトラブルシューティング">損失関数のトラブルシューティング</h3>
<ul>
<li>時間と損失軸の損失曲線を書いてみる</li>
<li>反比例の形でないときは問題あり</li>
<li>一般に学習率は1より遥かに小さい値</li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>EOSIOのGettingStartedをやった</title>
      <link>https://mithy.fun/memos/eos-setup/</link>
      <pubDate>Fri, 12 Apr 2019 22:07:40 +0900</pubDate>
      
      <guid>https://mithy.fun/memos/eos-setup/</guid>
      <description>EOSIO Developer Portal - EOSIO Development DocumentationのGETTING STARTEDをやったので、振り返りなどを DEVELOPMENT ENVIRONMENT CLIツールのインストールと、各CLIを使ってEOSチェーンを使うための手順を確認する工程 1.2 Before You Beginに沿って、eosio/eosioをインストールすると、nodeos/cleos/keosdの3つのコマンドが追加される。それぞれノードの構築、ノードに対する問い合わせ、ウォレットの生成、を行うこ</description>
      <content:encoded><p><a href="https://developers.eos.io/">EOSIO Developer Portal - EOSIO Development Documentation</a>の<a href="https://developers.eos.io/eosio-home/docs">GETTING STARTED</a>をやったので、振り返りなどを</p>
<h2 id="development-environment">DEVELOPMENT ENVIRONMENT</h2>
<p>CLIツールのインストールと、各CLIを使ってEOSチェーンを使うための手順を確認する工程</p>
<p><a href="https://developers.eos.io/eosio-home/docs/setting-up-your-environment">1.2 Before You Begin</a>に沿って、<code>eosio/eosio</code>をインストールすると、<a href="https://developers.eos.io/eosio-nodeos/docs">nodeos</a>/<a href="https://developers.eos.io/eosio-cleos/docs">cleos</a>/<a href="https//developers.eos.io/keosd/docs">keosd</a>の3つのコマンドが追加される。それぞれノードの構築、ノードに対する問い合わせ、ウォレットの生成、を行うことができる。わかりやすい相関図が、<a href="https://developers.eos.io/eosio-home/docs/how-it-all-fits-together">1.3 About the Stack</a>に記載されていたので、参考になった。</p>
<h3 id="ノードを立てたりする">ノードを立てたりする</h3>
<p>このチュートリアルでは、nodeosでノードを立てる際には以下のコマンドを叩いていた。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">nodeos -e -p eosio <span class="se">\
</span><span class="se"></span>  --plugin eosio::producer_plugin <span class="se">\
</span><span class="se"></span>  --plugin eosio::chain_api_plugin <span class="se">\
</span><span class="se"></span>  --plugin eosio::http_plugin <span class="se">\
</span><span class="se"></span>  --plugin eosio::history_plugin <span class="se">\
</span><span class="se"></span>  --plugin eosio::history_api_plugin <span class="se">\
</span><span class="se"></span>  --access-control-allow-origin<span class="o">=</span><span class="s1">&#39;*&#39;</span> <span class="se">\
</span><span class="se"></span>  --contracts-console <span class="se">\
</span><span class="se"></span>  --http-validate-host<span class="o">=</span><span class="nb">false</span> <span class="se">\
</span><span class="se"></span>  --verbose-http-errors &gt;&gt; nodeos.log 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">&amp;</span>
</code></pre></div><p>ノードを立てる際には<code>--plugin</code>で拡張を追加することができるようだ。
他のオプションについてはnodeos自体に対するものと、プラグインに対するものとがある。
<code>--contracts-console</code>は<code>nodeos</code>に対して、<code>--http-validate-host=false</code>は、<code>eosio::http_plugin</code>に対してのオプションとなっている。</p>
<p>また、このオプションは<code>config.ini</code>に記述することもできる、書き方は、<a href="https://developers.eos.io/eosio-nodeos/v1.0/docs/configuration-file">Configuration</a>を参考に。記述した際には<code>nodeos --config path/to/config.ini</code>などとして起動する。</p>
<p>また、ノードの停止方法の記載がなかったような気がする、止めたいときは<code>pkill nodeos</code>で止めていた。
また、チェーンを再構築する際には<code>--delete-all-blocks</code>を付与して立ち上げれば良い。</p>
<h3 id="ウォレットを作る">ウォレットを作る</h3>
<p><a href="https://developers.eos.io/eosio-home/docs/wallets">1.6 Create Development Wallet</a>のウォレット作成コマンドは以下のように記されていた。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">cleos wallet create --to-console
</code></pre></div><p>実行してみると<code>default</code>は既に作成済みで、keyも忘れていたので新しい名前でウォレットを作成した。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">cleos wallet create --to-console -n hoge
</code></pre></div><p>このコマンドは、<code>hoge</code>という名前のウォレットを作成している。
このようにウォレット作成した場合は以降の<code>cleos wallet</code>コマンドには大体<code>-n hoge</code>を付与していくことになる。
まずは、前項で発行したウォレットを、ユーザー<code>eosio</code>にインポートする。private keyの入力が求められ、ユーザー<code>eosio</code>のprivate keyを入力する必要がある。</p>
<p>若干前後するが、次項のアカウント<code>eosio</code>をウォレット<code>hoge</code>にインポートする。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">cleos wallet import -n hoge
</code></pre></div><h3 id="アカウントを発行する">アカウントを発行する</h3>
<p>EOSチェーンを立ち上げると、<code>system user</code>の<code>eosio</code>というアカウントが自動で発行される。このアカウントを使って、新規アカウントを発行するような形になっている。
新規アカウントの発行は以下のコマンドで行っていた。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># cleos create account &lt;creater&gt; &lt;new-account-name&gt; &lt;owner-key&gt; &lt;active-key (optional)&gt;</span>
cleos create account eosio bob &lt;eosio private-key&gt;
</code></pre></div><p>owner-key、active-keyに対しては、permissionが付与されており、owner-keyに対応する秘密鍵を知っていれば、active-keyの変更が可能。
active-keyが指定されていない場合はowner-keyと同一のものとなるが、実運用時には分けることを推奨していた。</p>
<h2 id="smart-contract-development">SMART CONTRACT DEVELOPMENT</h2>
<p>コードに関しては深く理解していないので、分かり次第コミットしていきたい。</p>
<p>なんとなくの流れとしては、C++をwasmに変換して、前項で用意したアカウントに書き込み、CLI経由で実行/確認、という感じ。</p>
<p>トークンの発行は、EthereumのERC20に当たる<code>eosio.token</code>は公式リポジトリに用意されており、それを元に、必要な処理を付け足したりして行くことになるようだ。</p>
<h2 id="おわり">おわり</h2>
<p>このチュートリアルをこなす分にはC++の知識はそこまで必要なさそうではあった。ただ、記法を全て理解しようとすると時間は掛かりそう、EOSに関わる部分を追っていきつつ、C++の知識を入れていく感じになりそう。</p>
<p>アカウントベースで、実行、変更の権限を複数の秘密鍵で管理できるのはいいなと思ってる。また、アカウントにEOSを持たせることで、スマートコントラクトの動作のためのCPUやメモリが確保されるらしい、ここらへんは実運用する場合は、把握する必要がありそう。</p>
</content:encoded>
    </item>
    
  </channel>
</rss>
